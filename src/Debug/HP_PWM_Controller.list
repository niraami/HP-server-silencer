
HP_PWM_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005814  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080059a4  080059a4  000159a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aa8  08005aa8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005aa8  08005aa8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005aa8  08005aa8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aa8  08005aa8  00015aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005aac  08005aac  00015aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000070  08005b20  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08005b20  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfd8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d4e  00000000  00000000  0002e078  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c68  00000000  00000000  0002fdc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b80  00000000  00000000  00030a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018efe  00000000  00000000  000315b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009893  00000000  00000000  0004a4ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bcbf  00000000  00000000  00053d41  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dfa00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb8  00000000  00000000  000dfa7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800598c 	.word	0x0800598c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800598c 	.word	0x0800598c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <setDutyCycle>:
extern void initialise_monitor_handles(void);

static uint32_t ccr2_last = 0;
static uint8_t duty_cycle = 0;

static void setDutyCycle(TIM_HandleTypeDef* const htim, uint32_t channel, float duty_cycle) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b087      	sub	sp, #28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	ed87 0a01 	vstr	s0, [r7, #4]
	if (duty_cycle > 100) duty_cycle = 100;
 8000a5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a5e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000b20 <setDutyCycle+0xd4>
 8000a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a6a:	dd01      	ble.n	8000a70 <setDutyCycle+0x24>
 8000a6c:	4b2d      	ldr	r3, [pc, #180]	; (8000b24 <setDutyCycle+0xd8>)
 8000a6e:	607b      	str	r3, [r7, #4]
	if (duty_cycle < 0) duty_cycle = 0;
 8000a70:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a7c:	d502      	bpl.n	8000a84 <setDutyCycle+0x38>
 8000a7e:	f04f 0300 	mov.w	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]

	float pw_resolution = (((float)(*htim).Init.Period + 1.0f) / 100.0f);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	ee07 3a90 	vmov	s15, r3
 8000a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000a98:	eddf 6a21 	vldr	s13, [pc, #132]	; 8000b20 <setDutyCycle+0xd4>
 8000a9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000aa0:	edc7 7a05 	vstr	s15, [r7, #20]

	uint16_t pw_desired = pw_resolution * duty_cycle;
 8000aa4:	ed97 7a05 	vldr	s14, [r7, #20]
 8000aa8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ab4:	ee17 3a90 	vmov	r3, s15
 8000ab8:	827b      	strh	r3, [r7, #18]
	__HAL_TIM_SET_COMPARE(htim, channel, pw_desired);
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d104      	bne.n	8000aca <setDutyCycle+0x7e>
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	8a7a      	ldrh	r2, [r7, #18]
 8000ac6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ac8:	e023      	b.n	8000b12 <setDutyCycle+0xc6>
	__HAL_TIM_SET_COMPARE(htim, channel, pw_desired);
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	d104      	bne.n	8000ada <setDutyCycle+0x8e>
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	8a7a      	ldrh	r2, [r7, #18]
 8000ad6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ad8:	e01b      	b.n	8000b12 <setDutyCycle+0xc6>
	__HAL_TIM_SET_COMPARE(htim, channel, pw_desired);
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	2b08      	cmp	r3, #8
 8000ade:	d104      	bne.n	8000aea <setDutyCycle+0x9e>
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	8a7a      	ldrh	r2, [r7, #18]
 8000ae6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000ae8:	e013      	b.n	8000b12 <setDutyCycle+0xc6>
	__HAL_TIM_SET_COMPARE(htim, channel, pw_desired);
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	2b0c      	cmp	r3, #12
 8000aee:	d104      	bne.n	8000afa <setDutyCycle+0xae>
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	8a7a      	ldrh	r2, [r7, #18]
 8000af6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000af8:	e00b      	b.n	8000b12 <setDutyCycle+0xc6>
	__HAL_TIM_SET_COMPARE(htim, channel, pw_desired);
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	2b10      	cmp	r3, #16
 8000afe:	d104      	bne.n	8000b0a <setDutyCycle+0xbe>
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	8a7a      	ldrh	r2, [r7, #18]
 8000b06:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000b08:	e003      	b.n	8000b12 <setDutyCycle+0xc6>
	__HAL_TIM_SET_COMPARE(htim, channel, pw_desired);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	8a7a      	ldrh	r2, [r7, #18]
 8000b10:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000b12:	bf00      	nop
 8000b14:	371c      	adds	r7, #28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	42c80000 	.word	0x42c80000
 8000b24:	42c80000 	.word	0x42c80000

08000b28 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	uint32_t ccr2_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000b30:	2104      	movs	r1, #4
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f002 fe82 	bl	800383c <HAL_TIM_ReadCapturedValue>
 8000b38:	60f8      	str	r0, [r7, #12]

	if (ccr2_last == 0)
 8000b3a:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d103      	bne.n	8000b4a <HAL_TIM_IC_CaptureCallback+0x22>
		ccr2_last = ccr2_capture;
 8000b42:	4a23      	ldr	r2, [pc, #140]	; (8000bd0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	6013      	str	r3, [r2, #0]
				:ccr2_last - ccr2_capture));
		ccr2_last = 0;

		printf("[%s]: duty cycle: %u\n", __func__, duty_cycle);
	}
}
 8000b48:	e03e      	b.n	8000bc8 <HAL_TIM_IC_CaptureCallback+0xa0>
	else if (ccr2_last != ccr2_capture) {
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d039      	beq.n	8000bc8 <HAL_TIM_IC_CaptureCallback+0xa0>
		duty_cycle = (uint8_t) (0.5 * ((ccr2_capture > ccr2_last)
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d914      	bls.n	8000b88 <HAL_TIM_IC_CaptureCallback+0x60>
				?ccr2_capture - ccr2_last
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	1ad3      	subs	r3, r2, r3
		duty_cycle = (uint8_t) (0.5 * ((ccr2_capture > ccr2_last)
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fcc4 	bl	80004f4 <__aeabi_ui2d>
 8000b6c:	f04f 0200 	mov.w	r2, #0
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000b72:	f7ff fd39 	bl	80005e8 <__aeabi_dmul>
 8000b76:	4603      	mov	r3, r0
 8000b78:	460c      	mov	r4, r1
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	4621      	mov	r1, r4
 8000b7e:	f7ff ff45 	bl	8000a0c <__aeabi_d2uiz>
 8000b82:	4603      	mov	r3, r0
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	e013      	b.n	8000bb0 <HAL_TIM_IC_CaptureCallback+0x88>
				:ccr2_last - ccr2_capture));
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	1ad3      	subs	r3, r2, r3
		duty_cycle = (uint8_t) (0.5 * ((ccr2_capture > ccr2_last)
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fcaf 	bl	80004f4 <__aeabi_ui2d>
 8000b96:	f04f 0200 	mov.w	r2, #0
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000b9c:	f7ff fd24 	bl	80005e8 <__aeabi_dmul>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	460c      	mov	r4, r1
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	4621      	mov	r1, r4
 8000ba8:	f7ff ff30 	bl	8000a0c <__aeabi_d2uiz>
 8000bac:	4603      	mov	r3, r0
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	4a09      	ldr	r2, [pc, #36]	; (8000bd8 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000bb2:	7013      	strb	r3, [r2, #0]
		ccr2_last = 0;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
		printf("[%s]: duty cycle: %u\n", __func__, duty_cycle);
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4906      	ldr	r1, [pc, #24]	; (8000bdc <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000bc2:	4807      	ldr	r0, [pc, #28]	; (8000be0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000bc4:	f003 fffe 	bl	8004bc4 <iprintf>
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd90      	pop	{r4, r7, pc}
 8000bd0:	2000008c 	.word	0x2000008c
 8000bd4:	3fe00000 	.word	0x3fe00000
 8000bd8:	20000090 	.word	0x20000090
 8000bdc:	080059bc 	.word	0x080059bc
 8000be0:	080059a4 	.word	0x080059a4

08000be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be8:	f000 fc00 	bl	80013ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bec:	f000 f820 	bl	8000c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf0:	f000 f9a6 	bl	8000f40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bf4:	f000 f974 	bl	8000ee0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000bf8:	f000 f874 	bl	8000ce4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bfc:	f000 f91e 	bl	8000e3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  initialise_monitor_handles();
 8000c00:	f000 fb0a 	bl	8001218 <initialise_monitor_handles>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000c04:	2104      	movs	r1, #4
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <main+0x40>)
 8000c08:	f002 fa1c 	bl	8003044 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <main+0x44>)
 8000c10:	f002 f99a 	bl	8002f48 <HAL_TIM_PWM_Start>

  setDutyCycle(&htim1, TIM_CHANNEL_1, 50);
 8000c14:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000c2c <main+0x48>
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4803      	ldr	r0, [pc, #12]	; (8000c28 <main+0x44>)
 8000c1c:	f7ff ff16 	bl	8000a4c <setDutyCycle>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <main+0x3c>
 8000c22:	bf00      	nop
 8000c24:	200000e0 	.word	0x200000e0
 8000c28:	200000a0 	.word	0x200000a0
 8000c2c:	42480000 	.word	0x42480000

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b096      	sub	sp, #88	; 0x58
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c3a:	2228      	movs	r2, #40	; 0x28
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 ffb8 	bl	8004bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]
 8000c62:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c64:	2302      	movs	r3, #2
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c70:	2302      	movs	r3, #2
 8000c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c74:	2300      	movs	r3, #0
 8000c76:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000c78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c7c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 fe9c 	bl	80019c0 <HAL_RCC_OscConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c8e:	f000 f97b 	bl	8000f88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c92:	230f      	movs	r3, #15
 8000c94:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c96:	2302      	movs	r3, #2
 8000c98:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 fd8e 	bl	80027d0 <HAL_RCC_ClockConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000cba:	f000 f965 	bl	8000f88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 ffb6 	bl	8002c3c <HAL_RCCEx_PeriphCLKConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000cd6:	f000 f957 	bl	8000f88 <Error_Handler>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3758      	adds	r7, #88	; 0x58
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b09a      	sub	sp, #104	; 0x68
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]
 8000d16:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	222c      	movs	r2, #44	; 0x2c
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f003 ff48 	bl	8004bb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d24:	4b43      	ldr	r3, [pc, #268]	; (8000e34 <MX_TIM1_Init+0x150>)
 8000d26:	4a44      	ldr	r2, [pc, #272]	; (8000e38 <MX_TIM1_Init+0x154>)
 8000d28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8000d2a:	4b42      	ldr	r3, [pc, #264]	; (8000e34 <MX_TIM1_Init+0x150>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	4b40      	ldr	r3, [pc, #256]	; (8000e34 <MX_TIM1_Init+0x150>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 199;
 8000d36:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <MX_TIM1_Init+0x150>)
 8000d38:	22c7      	movs	r2, #199	; 0xc7
 8000d3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3c:	4b3d      	ldr	r3, [pc, #244]	; (8000e34 <MX_TIM1_Init+0x150>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d42:	4b3c      	ldr	r3, [pc, #240]	; (8000e34 <MX_TIM1_Init+0x150>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d48:	4b3a      	ldr	r3, [pc, #232]	; (8000e34 <MX_TIM1_Init+0x150>)
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d4e:	4839      	ldr	r0, [pc, #228]	; (8000e34 <MX_TIM1_Init+0x150>)
 8000d50:	f002 f89a 	bl	8002e88 <HAL_TIM_Base_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d5a:	f000 f915 	bl	8000f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d62:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4832      	ldr	r0, [pc, #200]	; (8000e34 <MX_TIM1_Init+0x150>)
 8000d6c:	f002 fcac 	bl	80036c8 <HAL_TIM_ConfigClockSource>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d76:	f000 f907 	bl	8000f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d7a:	482e      	ldr	r0, [pc, #184]	; (8000e34 <MX_TIM1_Init+0x150>)
 8000d7c:	f002 f8af 	bl	8002ede <HAL_TIM_PWM_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000d86:	f000 f8ff 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4825      	ldr	r0, [pc, #148]	; (8000e34 <MX_TIM1_Init+0x150>)
 8000d9e:	f003 faa9 	bl	80042f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000da8:	f000 f8ee 	bl	8000f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dac:	2360      	movs	r3, #96	; 0x60
 8000dae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100;
 8000db0:	2364      	movs	r3, #100	; 0x64
 8000db2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db4:	2300      	movs	r3, #0
 8000db6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000db8:	2300      	movs	r3, #0
 8000dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4818      	ldr	r0, [pc, #96]	; (8000e34 <MX_TIM1_Init+0x150>)
 8000dd2:	f002 fb61 	bl	8003498 <HAL_TIM_PWM_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000ddc:	f000 f8d4 	bl	8000f88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	4619      	mov	r1, r3
 8000e14:	4807      	ldr	r0, [pc, #28]	; (8000e34 <MX_TIM1_Init+0x150>)
 8000e16:	f003 fadb 	bl	80043d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000e20:	f000 f8b2 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <MX_TIM1_Init+0x150>)
 8000e26:	f000 f943 	bl	80010b0 <HAL_TIM_MspPostInit>

}
 8000e2a:	bf00      	nop
 8000e2c:	3768      	adds	r7, #104	; 0x68
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200000a0 	.word	0x200000a0
 8000e38:	40012c00 	.word	0x40012c00

08000e3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <MX_TIM2_Init+0xa0>)
 8000e5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000e62:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <MX_TIM2_Init+0xa0>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e68:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <MX_TIM2_Init+0xa0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <MX_TIM2_Init+0xa0>)
 8000e70:	22c7      	movs	r2, #199	; 0xc7
 8000e72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <MX_TIM2_Init+0xa0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_TIM2_Init+0xa0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e80:	4816      	ldr	r0, [pc, #88]	; (8000edc <MX_TIM2_Init+0xa0>)
 8000e82:	f002 f8b3 	bl	8002fec <HAL_TIM_IC_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e8c:	f000 f87c 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480f      	ldr	r0, [pc, #60]	; (8000edc <MX_TIM2_Init+0xa0>)
 8000ea0:	f003 fa28 	bl	80042f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000eaa:	f000 f86d 	bl	8000f88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000eae:	230a      	movs	r3, #10
 8000eb0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2204      	movs	r2, #4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_TIM2_Init+0xa0>)
 8000ec6:	f002 fa4a 	bl	800335e <HAL_TIM_IC_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000ed0:	f000 f85a 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	3720      	adds	r7, #32
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200000e0 	.word	0x200000e0

08000ee0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000ee6:	4a15      	ldr	r2, [pc, #84]	; (8000f3c <MX_USART2_UART_Init+0x5c>)
 8000ee8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000f06:	220c      	movs	r2, #12
 8000f08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_USART2_UART_Init+0x58>)
 8000f24:	f003 faea 	bl	80044fc <HAL_UART_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f2e:	f000 f82b 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000120 	.word	0x20000120
 8000f3c:	40004400 	.word	0x40004400

08000f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_GPIO_Init+0x44>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <MX_GPIO_Init+0x44>)
 8000f4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f50:	6153      	str	r3, [r2, #20]
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_GPIO_Init+0x44>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_GPIO_Init+0x44>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <MX_GPIO_Init+0x44>)
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	6153      	str	r3, [r2, #20]
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_GPIO_Init+0x44>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]

}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_MspInit+0x44>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_MspInit+0x44>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6193      	str	r3, [r2, #24]
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <HAL_MspInit+0x44>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <HAL_MspInit+0x44>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <HAL_MspInit+0x44>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_MspInit+0x44>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_TIM_Base_MspInit+0x38>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d10b      	bne.n	800100a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_TIM_Base_MspInit+0x3c>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	4a09      	ldr	r2, [pc, #36]	; (800101c <HAL_TIM_Base_MspInit+0x3c>)
 8000ff8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ffc:	6193      	str	r3, [r2, #24]
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_TIM_Base_MspInit+0x3c>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40012c00 	.word	0x40012c00
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001040:	d130      	bne.n	80010a4 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_TIM_IC_MspInit+0x8c>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	4a19      	ldr	r2, [pc, #100]	; (80010ac <HAL_TIM_IC_MspInit+0x8c>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	61d3      	str	r3, [r2, #28]
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_TIM_IC_MspInit+0x8c>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <HAL_TIM_IC_MspInit+0x8c>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a13      	ldr	r2, [pc, #76]	; (80010ac <HAL_TIM_IC_MspInit+0x8c>)
 8001060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001064:	6153      	str	r3, [r2, #20]
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_TIM_IC_MspInit+0x8c>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001072:	2302      	movs	r3, #2
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001082:	2301      	movs	r3, #1
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f000 fb24 	bl	80016dc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	201c      	movs	r0, #28
 800109a:	f000 fae8 	bl	800166e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800109e:	201c      	movs	r0, #28
 80010a0:	f000 fb01 	bl	80016a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010a4:	bf00      	nop
 80010a6:	3728      	adds	r7, #40	; 0x28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40021000 	.word	0x40021000

080010b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a12      	ldr	r2, [pc, #72]	; (8001118 <HAL_TIM_MspPostInit+0x68>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d11d      	bne.n	800110e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_TIM_MspPostInit+0x6c>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	4a11      	ldr	r2, [pc, #68]	; (800111c <HAL_TIM_MspPostInit+0x6c>)
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010dc:	6153      	str	r3, [r2, #20]
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_TIM_MspPostInit+0x6c>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80010fc:	2306      	movs	r3, #6
 80010fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f000 fae7 	bl	80016dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012c00 	.word	0x40012c00
 800111c:	40021000 	.word	0x40021000

08001120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <HAL_UART_MspInit+0x80>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d129      	bne.n	8001196 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_UART_MspInit+0x84>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <HAL_UART_MspInit+0x84>)
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114c:	61d3      	str	r3, [r2, #28]
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_UART_MspInit+0x84>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_UART_MspInit+0x84>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <HAL_UART_MspInit+0x84>)
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	6153      	str	r3, [r2, #20]
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_UART_MspInit+0x84>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001172:	f248 0304 	movw	r3, #32772	; 0x8004
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001184:	2307      	movs	r3, #7
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001192:	f000 faa3 	bl	80016dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	; 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40004400 	.word	0x40004400
 80011a4:	40021000 	.word	0x40021000

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <HardFault_Handler+0x4>

080011bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <MemManage_Handler+0x4>

080011c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <BusFault_Handler+0x4>

080011c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <UsageFault_Handler+0x4>

080011ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fc:	f000 f93c 	bl	8001478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <TIM2_IRQHandler+0x10>)
 800120a:	f001 ff89 	bl	8003120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200000e0 	.word	0x200000e0

08001218 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	e00a      	b.n	800124e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001238:	f3af 8000 	nop.w
 800123c:	4601      	mov	r1, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	60ba      	str	r2, [r7, #8]
 8001244:	b2ca      	uxtb	r2, r1
 8001246:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	3301      	adds	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	429a      	cmp	r2, r3
 8001254:	dbf0      	blt.n	8001238 <_read+0x12>
	}

return len;
 8001256:	687b      	ldr	r3, [r7, #4]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	e009      	b.n	8001286 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	60ba      	str	r2, [r7, #8]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3301      	adds	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	429a      	cmp	r2, r3
 800128c:	dbf1      	blt.n	8001272 <_write+0x12>
	}
	return len;
 800128e:	687b      	ldr	r3, [r7, #4]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <_close>:

int _close(int file)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	return -1;
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c0:	605a      	str	r2, [r3, #4]
	return 0;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <_isatty>:

int _isatty(int file)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	return 1;
 80012d8:	2301      	movs	r3, #1
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b085      	sub	sp, #20
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
	return 0;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001308:	4a14      	ldr	r2, [pc, #80]	; (800135c <_sbrk+0x5c>)
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <_sbrk+0x60>)
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <_sbrk+0x64>)
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <_sbrk+0x68>)
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	429a      	cmp	r2, r3
 800132e:	d207      	bcs.n	8001340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001330:	f003 fc16 	bl	8004b60 <__errno>
 8001334:	4602      	mov	r2, r0
 8001336:	230c      	movs	r3, #12
 8001338:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	e009      	b.n	8001354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <_sbrk+0x64>)
 8001350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20003000 	.word	0x20003000
 8001360:	00000400 	.word	0x00000400
 8001364:	20000094 	.word	0x20000094
 8001368:	200001a8 	.word	0x200001a8

0800136c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <SystemInit+0x28>)
 8001372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001376:	4a07      	ldr	r2, [pc, #28]	; (8001394 <SystemInit+0x28>)
 8001378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800137c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <SystemInit+0x28>)
 8001382:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001386:	609a      	str	r2, [r3, #8]
#endif
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800139c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800139e:	e003      	b.n	80013a8 <LoopCopyDataInit>

080013a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013a6:	3104      	adds	r1, #4

080013a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013a8:	480b      	ldr	r0, [pc, #44]	; (80013d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80013ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013b0:	d3f6      	bcc.n	80013a0 <CopyDataInit>
	ldr	r2, =_sbss
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013b4:	e002      	b.n	80013bc <LoopFillZerobss>

080013b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013b8:	f842 3b04 	str.w	r3, [r2], #4

080013bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <LoopForever+0x16>)
	cmp	r2, r3
 80013be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013c0:	d3f9      	bcc.n	80013b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013c2:	f7ff ffd3 	bl	800136c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013c6:	f003 fbd1 	bl	8004b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ca:	f7ff fc0b 	bl	8000be4 <main>

080013ce <LoopForever>:

LoopForever:
    b LoopForever
 80013ce:	e7fe      	b.n	80013ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013d0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80013d4:	08005ab0 	.word	0x08005ab0
	ldr	r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013dc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80013e0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80013e4:	200001a8 	.word	0x200001a8

080013e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC1_2_IRQHandler>
	...

080013ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_Init+0x28>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_Init+0x28>)
 80013f6:	f043 0310 	orr.w	r3, r3, #16
 80013fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 f92b 	bl	8001658 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001402:	2000      	movs	r0, #0
 8001404:	f000 f808 	bl	8001418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001408:	f7ff fdc6 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40022000 	.word	0x40022000

08001418 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_InitTick+0x54>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_InitTick+0x58>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001432:	fbb2 f3f3 	udiv	r3, r2, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f943 	bl	80016c2 <HAL_SYSTICK_Config>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e00e      	b.n	8001464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	d80a      	bhi.n	8001462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144c:	2200      	movs	r2, #0
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f000 f90b 	bl	800166e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001458:	4a06      	ldr	r2, [pc, #24]	; (8001474 <HAL_InitTick+0x5c>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000000 	.word	0x20000000
 8001470:	20000008 	.word	0x20000008
 8001474:	20000004 	.word	0x20000004

08001478 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_IncTick+0x20>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_IncTick+0x24>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <HAL_IncTick+0x24>)
 800148a:	6013      	str	r3, [r2, #0]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000008 	.word	0x20000008
 800149c:	200001a0 	.word	0x200001a0

080014a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_GetTick+0x14>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	200001a0 	.word	0x200001a0

080014b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d4:	4013      	ands	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ea:	4a04      	ldr	r2, [pc, #16]	; (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	60d3      	str	r3, [r2, #12]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <__NVIC_GetPriorityGrouping+0x18>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	f003 0307 	and.w	r3, r3, #7
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	2b00      	cmp	r3, #0
 800152c:	db0b      	blt.n	8001546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	f003 021f 	and.w	r2, r3, #31
 8001534:	4907      	ldr	r1, [pc, #28]	; (8001554 <__NVIC_EnableIRQ+0x38>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	2001      	movs	r0, #1
 800153e:	fa00 f202 	lsl.w	r2, r0, r2
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000e100 	.word	0xe000e100

08001558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	db0a      	blt.n	8001582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	490c      	ldr	r1, [pc, #48]	; (80015a4 <__NVIC_SetPriority+0x4c>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	440b      	add	r3, r1
 800157c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001580:	e00a      	b.n	8001598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4908      	ldr	r1, [pc, #32]	; (80015a8 <__NVIC_SetPriority+0x50>)
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	3b04      	subs	r3, #4
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	440b      	add	r3, r1
 8001596:	761a      	strb	r2, [r3, #24]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000e100 	.word	0xe000e100
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	; 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f1c3 0307 	rsb	r3, r3, #7
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	bf28      	it	cs
 80015ca:	2304      	movcs	r3, #4
 80015cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3304      	adds	r3, #4
 80015d2:	2b06      	cmp	r3, #6
 80015d4:	d902      	bls.n	80015dc <NVIC_EncodePriority+0x30>
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3b03      	subs	r3, #3
 80015da:	e000      	b.n	80015de <NVIC_EncodePriority+0x32>
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43d9      	mvns	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	4313      	orrs	r3, r2
         );
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001624:	d301      	bcc.n	800162a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001626:	2301      	movs	r3, #1
 8001628:	e00f      	b.n	800164a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <SysTick_Config+0x40>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001632:	210f      	movs	r1, #15
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f7ff ff8e 	bl	8001558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <SysTick_Config+0x40>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <SysTick_Config+0x40>)
 8001644:	2207      	movs	r2, #7
 8001646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	e000e010 	.word	0xe000e010

08001658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff29 	bl	80014b8 <__NVIC_SetPriorityGrouping>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001680:	f7ff ff3e 	bl	8001500 <__NVIC_GetPriorityGrouping>
 8001684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	6978      	ldr	r0, [r7, #20]
 800168c:	f7ff ff8e 	bl	80015ac <NVIC_EncodePriority>
 8001690:	4602      	mov	r2, r0
 8001692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff5d 	bl	8001558 <__NVIC_SetPriority>
}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff31 	bl	800151c <__NVIC_EnableIRQ>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ffa2 	bl	8001614 <SysTick_Config>
 80016d0:	4603      	mov	r3, r0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ea:	e14e      	b.n	800198a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2101      	movs	r1, #1
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 8140 	beq.w	8001984 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x38>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b12      	cmp	r3, #18
 8001712:	d123      	bne.n	800175c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	08da      	lsrs	r2, r3, #3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3208      	adds	r2, #8
 800171c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001720:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	220f      	movs	r2, #15
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	08da      	lsrs	r2, r3, #3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3208      	adds	r2, #8
 8001756:	6939      	ldr	r1, [r7, #16]
 8001758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0203 	and.w	r2, r3, #3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d00b      	beq.n	80017b0 <HAL_GPIO_Init+0xd4>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d007      	beq.n	80017b0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a4:	2b11      	cmp	r3, #17
 80017a6:	d003      	beq.n	80017b0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b12      	cmp	r3, #18
 80017ae:	d130      	bne.n	8001812 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e6:	2201      	movs	r2, #1
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	f003 0201 	and.w	r2, r3, #1
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	2203      	movs	r2, #3
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 809a 	beq.w	8001984 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001850:	4b55      	ldr	r3, [pc, #340]	; (80019a8 <HAL_GPIO_Init+0x2cc>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a54      	ldr	r2, [pc, #336]	; (80019a8 <HAL_GPIO_Init+0x2cc>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b52      	ldr	r3, [pc, #328]	; (80019a8 <HAL_GPIO_Init+0x2cc>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001868:	4a50      	ldr	r2, [pc, #320]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001892:	d013      	beq.n	80018bc <HAL_GPIO_Init+0x1e0>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a46      	ldr	r2, [pc, #280]	; (80019b0 <HAL_GPIO_Init+0x2d4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d00d      	beq.n	80018b8 <HAL_GPIO_Init+0x1dc>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a45      	ldr	r2, [pc, #276]	; (80019b4 <HAL_GPIO_Init+0x2d8>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d007      	beq.n	80018b4 <HAL_GPIO_Init+0x1d8>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a44      	ldr	r2, [pc, #272]	; (80019b8 <HAL_GPIO_Init+0x2dc>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d101      	bne.n	80018b0 <HAL_GPIO_Init+0x1d4>
 80018ac:	2303      	movs	r3, #3
 80018ae:	e006      	b.n	80018be <HAL_GPIO_Init+0x1e2>
 80018b0:	2305      	movs	r3, #5
 80018b2:	e004      	b.n	80018be <HAL_GPIO_Init+0x1e2>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e002      	b.n	80018be <HAL_GPIO_Init+0x1e2>
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <HAL_GPIO_Init+0x1e2>
 80018bc:	2300      	movs	r3, #0
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	f002 0203 	and.w	r2, r2, #3
 80018c4:	0092      	lsls	r2, r2, #2
 80018c6:	4093      	lsls	r3, r2
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ce:	4937      	ldr	r1, [pc, #220]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	3302      	adds	r3, #2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018dc:	4b37      	ldr	r3, [pc, #220]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001900:	4a2e      	ldr	r2, [pc, #184]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001906:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800192a:	4a24      	ldr	r2, [pc, #144]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001954:	4a19      	ldr	r2, [pc, #100]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800197e:	4a0f      	ldr	r2, [pc, #60]	; (80019bc <HAL_GPIO_Init+0x2e0>)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	3301      	adds	r3, #1
 8001988:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	f47f aea9 	bne.w	80016ec <HAL_GPIO_Init+0x10>
  }
}
 800199a:	bf00      	nop
 800199c:	371c      	adds	r7, #28
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40010000 	.word	0x40010000
 80019b0:	48000400 	.word	0x48000400
 80019b4:	48000800 	.word	0x48000800
 80019b8:	48000c00 	.word	0x48000c00
 80019bc:	40010400 	.word	0x40010400

080019c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	f000 bef4 	b.w	80027c2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 816a 	beq.w	8001cbe <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019ea:	4bb3      	ldr	r3, [pc, #716]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d00c      	beq.n	8001a10 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019f6:	4bb0      	ldr	r3, [pc, #704]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d159      	bne.n	8001ab6 <HAL_RCC_OscConfig+0xf6>
 8001a02:	4bad      	ldr	r3, [pc, #692]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0e:	d152      	bne.n	8001ab6 <HAL_RCC_OscConfig+0xf6>
 8001a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a14:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a24:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d102      	bne.n	8001a42 <HAL_RCC_OscConfig+0x82>
 8001a3c:	4b9e      	ldr	r3, [pc, #632]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	e015      	b.n	8001a6e <HAL_RCC_OscConfig+0xae>
 8001a42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a46:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a5a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a5e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a62:	fa93 f3a3 	rbit	r3, r3
 8001a66:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a6a:	4b93      	ldr	r3, [pc, #588]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a72:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001a76:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a7a:	fa92 f2a2 	rbit	r2, r2
 8001a7e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001a82:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a86:	fab2 f282 	clz	r2, r2
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	f042 0220 	orr.w	r2, r2, #32
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	f002 021f 	and.w	r2, r2, #31
 8001a96:	2101      	movs	r1, #1
 8001a98:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 810c 	beq.w	8001cbc <HAL_RCC_OscConfig+0x2fc>
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f040 8106 	bne.w	8001cbc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f000 be86 	b.w	80027c2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac0:	d106      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x110>
 8001ac2:	4b7d      	ldr	r3, [pc, #500]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7c      	ldr	r2, [pc, #496]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e030      	b.n	8001b32 <HAL_RCC_OscConfig+0x172>
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x134>
 8001ada:	4b77      	ldr	r3, [pc, #476]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a76      	ldr	r2, [pc, #472]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b74      	ldr	r3, [pc, #464]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a73      	ldr	r2, [pc, #460]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e01e      	b.n	8001b32 <HAL_RCC_OscConfig+0x172>
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001afe:	d10c      	bne.n	8001b1a <HAL_RCC_OscConfig+0x15a>
 8001b00:	4b6d      	ldr	r3, [pc, #436]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a6c      	ldr	r2, [pc, #432]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b6a      	ldr	r3, [pc, #424]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a69      	ldr	r2, [pc, #420]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e00b      	b.n	8001b32 <HAL_RCC_OscConfig+0x172>
 8001b1a:	4b67      	ldr	r3, [pc, #412]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a66      	ldr	r2, [pc, #408]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	4b64      	ldr	r3, [pc, #400]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a63      	ldr	r2, [pc, #396]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b30:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b32:	4b61      	ldr	r3, [pc, #388]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	f023 020f 	bic.w	r2, r3, #15
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	495d      	ldr	r1, [pc, #372]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d059      	beq.n	8001c04 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff fca6 	bl	80014a0 <HAL_GetTick>
 8001b54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b58:	e00a      	b.n	8001b70 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b5a:	f7ff fca1 	bl	80014a0 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d902      	bls.n	8001b70 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	f000 be29 	b.w	80027c2 <HAL_RCC_OscConfig+0xe02>
 8001b70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b74:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b84:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d102      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x1e2>
 8001b9c:	4b46      	ldr	r3, [pc, #280]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	e015      	b.n	8001bce <HAL_RCC_OscConfig+0x20e>
 8001ba2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001bb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001bbe:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001bc2:	fa93 f3a3 	rbit	r3, r3
 8001bc6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001bca:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bd2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001bd6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001bda:	fa92 f2a2 	rbit	r2, r2
 8001bde:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001be2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001be6:	fab2 f282 	clz	r2, r2
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	f042 0220 	orr.w	r2, r2, #32
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	f002 021f 	and.w	r2, r2, #31
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0ab      	beq.n	8001b5a <HAL_RCC_OscConfig+0x19a>
 8001c02:	e05c      	b.n	8001cbe <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fc4c 	bl	80014a0 <HAL_GetTick>
 8001c08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0c:	e00a      	b.n	8001c24 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c0e:	f7ff fc47 	bl	80014a0 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d902      	bls.n	8001c24 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	f000 bdcf 	b.w	80027c2 <HAL_RCC_OscConfig+0xe02>
 8001c24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c28:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c38:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3c:	fab3 f383 	clz	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d102      	bne.n	8001c56 <HAL_RCC_OscConfig+0x296>
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	e015      	b.n	8001c82 <HAL_RCC_OscConfig+0x2c2>
 8001c56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c5a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c6e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c72:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <HAL_RCC_OscConfig+0x2f8>)
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c86:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001c8a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c8e:	fa92 f2a2 	rbit	r2, r2
 8001c92:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c96:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c9a:	fab2 f282 	clz	r2, r2
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	f042 0220 	orr.w	r2, r2, #32
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	f002 021f 	and.w	r2, r2, #31
 8001caa:	2101      	movs	r1, #1
 8001cac:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1ab      	bne.n	8001c0e <HAL_RCC_OscConfig+0x24e>
 8001cb6:	e002      	b.n	8001cbe <HAL_RCC_OscConfig+0x2fe>
 8001cb8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 816f 	beq.w	8001fac <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cce:	4bd0      	ldr	r3, [pc, #832]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00b      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cda:	4bcd      	ldr	r3, [pc, #820]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d16c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x400>
 8001ce6:	4bca      	ldr	r3, [pc, #808]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d166      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x400>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001cfc:	fa93 f3a3 	rbit	r3, r3
 8001d00:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001d04:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d08:	fab3 f383 	clz	r3, r3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d102      	bne.n	8001d22 <HAL_RCC_OscConfig+0x362>
 8001d1c:	4bbc      	ldr	r3, [pc, #752]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	e013      	b.n	8001d4a <HAL_RCC_OscConfig+0x38a>
 8001d22:	2302      	movs	r3, #2
 8001d24:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d34:	2302      	movs	r3, #2
 8001d36:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d46:	4bb2      	ldr	r3, [pc, #712]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d50:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d54:	fa92 f2a2 	rbit	r2, r2
 8001d58:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d5c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d60:	fab2 f282 	clz	r2, r2
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	f042 0220 	orr.w	r2, r2, #32
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	f002 021f 	and.w	r2, r2, #31
 8001d70:	2101      	movs	r1, #1
 8001d72:	fa01 f202 	lsl.w	r2, r1, r2
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <HAL_RCC_OscConfig+0x3cc>
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d002      	beq.n	8001d8c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	f000 bd1b 	b.w	80027c2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4ba0      	ldr	r3, [pc, #640]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	21f8      	movs	r1, #248	; 0xf8
 8001d9c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001da4:	fa91 f1a1 	rbit	r1, r1
 8001da8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001dac:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001db0:	fab1 f181 	clz	r1, r1
 8001db4:	b2c9      	uxtb	r1, r1
 8001db6:	408b      	lsls	r3, r1
 8001db8:	4995      	ldr	r1, [pc, #596]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	e0f5      	b.n	8001fac <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8085 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x516>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001dde:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	461a      	mov	r2, r3
 8001df4:	2301      	movs	r3, #1
 8001df6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fb52 	bl	80014a0 <HAL_GetTick>
 8001dfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e00:	e00a      	b.n	8001e18 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e02:	f7ff fb4d 	bl	80014a0 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d902      	bls.n	8001e18 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	f000 bcd5 	b.w	80027c2 <HAL_RCC_OscConfig+0xe02>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001e2a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	095b      	lsrs	r3, r3, #5
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d102      	bne.n	8001e48 <HAL_RCC_OscConfig+0x488>
 8001e42:	4b73      	ldr	r3, [pc, #460]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	e013      	b.n	8001e70 <HAL_RCC_OscConfig+0x4b0>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e60:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e6c:	4b68      	ldr	r3, [pc, #416]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	2202      	movs	r2, #2
 8001e72:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e76:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e7a:	fa92 f2a2 	rbit	r2, r2
 8001e7e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001e82:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e86:	fab2 f282 	clz	r2, r2
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	f042 0220 	orr.w	r2, r2, #32
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	f002 021f 	and.w	r2, r2, #31
 8001e96:	2101      	movs	r1, #1
 8001e98:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0af      	beq.n	8001e02 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea2:	4b5b      	ldr	r3, [pc, #364]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	21f8      	movs	r1, #248	; 0xf8
 8001eb2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001eba:	fa91 f1a1 	rbit	r1, r1
 8001ebe:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001ec2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001ec6:	fab1 f181 	clz	r1, r1
 8001eca:	b2c9      	uxtb	r1, r1
 8001ecc:	408b      	lsls	r3, r1
 8001ece:	4950      	ldr	r1, [pc, #320]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]
 8001ed4:	e06a      	b.n	8001fac <HAL_RCC_OscConfig+0x5ec>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ee0:	fa93 f3a3 	rbit	r3, r3
 8001ee4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001ee8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eec:	fab3 f383 	clz	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ef6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	461a      	mov	r2, r3
 8001efe:	2300      	movs	r3, #0
 8001f00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7ff facd 	bl	80014a0 <HAL_GetTick>
 8001f06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0c:	f7ff fac8 	bl	80014a0 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d902      	bls.n	8001f22 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	f000 bc50 	b.w	80027c2 <HAL_RCC_OscConfig+0xe02>
 8001f22:	2302      	movs	r3, #2
 8001f24:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f2c:	fa93 f3a3 	rbit	r3, r3
 8001f30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f38:	fab3 f383 	clz	r3, r3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d102      	bne.n	8001f52 <HAL_RCC_OscConfig+0x592>
 8001f4c:	4b30      	ldr	r3, [pc, #192]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	e013      	b.n	8001f7a <HAL_RCC_OscConfig+0x5ba>
 8001f52:	2302      	movs	r3, #2
 8001f54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f64:	2302      	movs	r3, #2
 8001f66:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f76:	4b26      	ldr	r3, [pc, #152]	; (8002010 <HAL_RCC_OscConfig+0x650>)
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001f80:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f84:	fa92 f2a2 	rbit	r2, r2
 8001f88:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001f8c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f90:	fab2 f282 	clz	r2, r2
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f042 0220 	orr.w	r2, r2, #32
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	f002 021f 	and.w	r2, r2, #31
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1af      	bne.n	8001f0c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80da 	beq.w	8002170 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d069      	beq.n	800209a <HAL_RCC_OscConfig+0x6da>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCC_OscConfig+0x654>)
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	461a      	mov	r2, r3
 8001fec:	2301      	movs	r3, #1
 8001fee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff0:	f7ff fa56 	bl	80014a0 <HAL_GetTick>
 8001ff4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff8:	e00e      	b.n	8002018 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7ff fa51 	bl	80014a0 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d906      	bls.n	8002018 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e3d9      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	10908120 	.word	0x10908120
 8002018:	2302      	movs	r3, #2
 800201a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800202a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800202e:	2202      	movs	r2, #2
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	fa93 f2a3 	rbit	r2, r3
 800203c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002046:	2202      	movs	r2, #2
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	fa93 f2a3 	rbit	r2, r3
 8002054:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002058:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205a:	4ba5      	ldr	r3, [pc, #660]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 800205c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800205e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002062:	2102      	movs	r1, #2
 8002064:	6019      	str	r1, [r3, #0]
 8002066:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	fa93 f1a3 	rbit	r1, r3
 8002070:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002074:	6019      	str	r1, [r3, #0]
  return result;
 8002076:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	2101      	movs	r1, #1
 800208e:	fa01 f303 	lsl.w	r3, r1, r3
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0b0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x63a>
 8002098:	e06a      	b.n	8002170 <HAL_RCC_OscConfig+0x7b0>
 800209a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	fa93 f2a3 	rbit	r2, r3
 80020ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020b0:	601a      	str	r2, [r3, #0]
  return result;
 80020b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020b6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	4b8c      	ldr	r3, [pc, #560]	; (80022f4 <HAL_RCC_OscConfig+0x934>)
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	461a      	mov	r2, r3
 80020c8:	2300      	movs	r3, #0
 80020ca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020cc:	f7ff f9e8 	bl	80014a0 <HAL_GetTick>
 80020d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	e009      	b.n	80020ea <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d6:	f7ff f9e3 	bl	80014a0 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e36b      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
 80020ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80020ee:	2202      	movs	r2, #2
 80020f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	fa93 f2a3 	rbit	r2, r3
 80020fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002106:	2202      	movs	r2, #2
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	fa93 f2a3 	rbit	r2, r3
 8002114:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800211e:	2202      	movs	r2, #2
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	fa93 f2a3 	rbit	r2, r3
 800212c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002130:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002132:	4b6f      	ldr	r3, [pc, #444]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002136:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800213a:	2102      	movs	r1, #2
 800213c:	6019      	str	r1, [r3, #0]
 800213e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	fa93 f1a3 	rbit	r1, r3
 8002148:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800214c:	6019      	str	r1, [r3, #0]
  return result;
 800214e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	2101      	movs	r1, #1
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1b2      	bne.n	80020d6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 8158 	beq.w	8002430 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002186:	4b5a      	ldr	r3, [pc, #360]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d112      	bne.n	80021b8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	4b57      	ldr	r3, [pc, #348]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4a56      	ldr	r2, [pc, #344]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219c:	61d3      	str	r3, [r2, #28]
 800219e:	4b54      	ldr	r3, [pc, #336]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80021a6:	f107 0308 	add.w	r3, r7, #8
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80021b2:	2301      	movs	r3, #1
 80021b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	4b4f      	ldr	r3, [pc, #316]	; (80022f8 <HAL_RCC_OscConfig+0x938>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d11a      	bne.n	80021fa <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c4:	4b4c      	ldr	r3, [pc, #304]	; (80022f8 <HAL_RCC_OscConfig+0x938>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a4b      	ldr	r2, [pc, #300]	; (80022f8 <HAL_RCC_OscConfig+0x938>)
 80021ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ce:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d0:	f7ff f966 	bl	80014a0 <HAL_GetTick>
 80021d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	e009      	b.n	80021ee <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021da:	f7ff f961 	bl	80014a0 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e2e9      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ee:	4b42      	ldr	r3, [pc, #264]	; (80022f8 <HAL_RCC_OscConfig+0x938>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0ef      	beq.n	80021da <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d106      	bne.n	8002212 <HAL_RCC_OscConfig+0x852>
 8002204:	4b3a      	ldr	r3, [pc, #232]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4a39      	ldr	r2, [pc, #228]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6213      	str	r3, [r2, #32]
 8002210:	e02f      	b.n	8002272 <HAL_RCC_OscConfig+0x8b2>
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10c      	bne.n	8002236 <HAL_RCC_OscConfig+0x876>
 800221c:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4a33      	ldr	r2, [pc, #204]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002222:	f023 0301 	bic.w	r3, r3, #1
 8002226:	6213      	str	r3, [r2, #32]
 8002228:	4b31      	ldr	r3, [pc, #196]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4a30      	ldr	r2, [pc, #192]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 800222e:	f023 0304 	bic.w	r3, r3, #4
 8002232:	6213      	str	r3, [r2, #32]
 8002234:	e01d      	b.n	8002272 <HAL_RCC_OscConfig+0x8b2>
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b05      	cmp	r3, #5
 800223e:	d10c      	bne.n	800225a <HAL_RCC_OscConfig+0x89a>
 8002240:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002246:	f043 0304 	orr.w	r3, r3, #4
 800224a:	6213      	str	r3, [r2, #32]
 800224c:	4b28      	ldr	r3, [pc, #160]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4a27      	ldr	r2, [pc, #156]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6213      	str	r3, [r2, #32]
 8002258:	e00b      	b.n	8002272 <HAL_RCC_OscConfig+0x8b2>
 800225a:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	6213      	str	r3, [r2, #32]
 8002266:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	4a21      	ldr	r2, [pc, #132]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 800226c:	f023 0304 	bic.w	r3, r3, #4
 8002270:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d06b      	beq.n	8002354 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227c:	f7ff f910 	bl	80014a0 <HAL_GetTick>
 8002280:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002284:	e00b      	b.n	800229e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7ff f90b 	bl	80014a0 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	; 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e291      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
 800229e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022a2:	2202      	movs	r2, #2
 80022a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	fa93 f2a3 	rbit	r2, r3
 80022b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80022ba:	2202      	movs	r2, #2
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	fa93 f2a3 	rbit	r2, r3
 80022c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022cc:	601a      	str	r2, [r3, #0]
  return result;
 80022ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f043 0302 	orr.w	r3, r3, #2
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d109      	bne.n	80022fc <HAL_RCC_OscConfig+0x93c>
 80022e8:	4b01      	ldr	r3, [pc, #4]	; (80022f0 <HAL_RCC_OscConfig+0x930>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	e014      	b.n	8002318 <HAL_RCC_OscConfig+0x958>
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	10908120 	.word	0x10908120
 80022f8:	40007000 	.word	0x40007000
 80022fc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002300:	2202      	movs	r2, #2
 8002302:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	fa93 f2a3 	rbit	r2, r3
 800230e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	4bbb      	ldr	r3, [pc, #748]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800231c:	2102      	movs	r1, #2
 800231e:	6011      	str	r1, [r2, #0]
 8002320:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	fa92 f1a2 	rbit	r1, r2
 800232a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800232e:	6011      	str	r1, [r2, #0]
  return result;
 8002330:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	fab2 f282 	clz	r2, r2
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	f002 021f 	and.w	r2, r2, #31
 8002346:	2101      	movs	r1, #1
 8002348:	fa01 f202 	lsl.w	r2, r1, r2
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d099      	beq.n	8002286 <HAL_RCC_OscConfig+0x8c6>
 8002352:	e063      	b.n	800241c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002354:	f7ff f8a4 	bl	80014a0 <HAL_GetTick>
 8002358:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235c:	e00b      	b.n	8002376 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800235e:	f7ff f89f 	bl	80014a0 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e225      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
 8002376:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800237a:	2202      	movs	r2, #2
 800237c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	fa93 f2a3 	rbit	r2, r3
 8002388:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002392:	2202      	movs	r2, #2
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	fa93 f2a3 	rbit	r2, r3
 80023a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023a4:	601a      	str	r2, [r3, #0]
  return result;
 80023a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f043 0302 	orr.w	r3, r3, #2
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d102      	bne.n	80023c6 <HAL_RCC_OscConfig+0xa06>
 80023c0:	4b90      	ldr	r3, [pc, #576]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	e00d      	b.n	80023e2 <HAL_RCC_OscConfig+0xa22>
 80023c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023ca:	2202      	movs	r2, #2
 80023cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	fa93 f2a3 	rbit	r2, r3
 80023d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	4b89      	ldr	r3, [pc, #548]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023e6:	2102      	movs	r1, #2
 80023e8:	6011      	str	r1, [r2, #0]
 80023ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	fa92 f1a2 	rbit	r1, r2
 80023f4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80023f8:	6011      	str	r1, [r2, #0]
  return result;
 80023fa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	fab2 f282 	clz	r2, r2
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	f002 021f 	and.w	r2, r2, #31
 8002410:	2101      	movs	r1, #1
 8002412:	fa01 f202 	lsl.w	r2, r1, r2
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1a0      	bne.n	800235e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800241c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002420:	2b01      	cmp	r3, #1
 8002422:	d105      	bne.n	8002430 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002424:	4b77      	ldr	r3, [pc, #476]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	4a76      	ldr	r2, [pc, #472]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 800242a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800242e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 81c2 	beq.w	80027c0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800243c:	4b71      	ldr	r3, [pc, #452]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b08      	cmp	r3, #8
 8002446:	f000 819c 	beq.w	8002782 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b02      	cmp	r3, #2
 8002452:	f040 8114 	bne.w	800267e <HAL_RCC_OscConfig+0xcbe>
 8002456:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800245a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800245e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	fa93 f2a3 	rbit	r2, r3
 800246a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800246e:	601a      	str	r2, [r3, #0]
  return result;
 8002470:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002474:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002480:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	461a      	mov	r2, r3
 8002488:	2300      	movs	r3, #0
 800248a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7ff f808 	bl	80014a0 <HAL_GetTick>
 8002490:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002494:	e009      	b.n	80024aa <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002496:	f7ff f803 	bl	80014a0 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e18b      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
 80024aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80024ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	fa93 f2a3 	rbit	r2, r3
 80024be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024c2:	601a      	str	r2, [r3, #0]
  return result;
 80024c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d102      	bne.n	80024e4 <HAL_RCC_OscConfig+0xb24>
 80024de:	4b49      	ldr	r3, [pc, #292]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	e01b      	b.n	800251c <HAL_RCC_OscConfig+0xb5c>
 80024e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	fa93 f2a3 	rbit	r2, r3
 80024f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002502:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	fa93 f2a3 	rbit	r2, r3
 8002512:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002520:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002524:	6011      	str	r1, [r2, #0]
 8002526:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	fa92 f1a2 	rbit	r1, r2
 8002530:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002534:	6011      	str	r1, [r2, #0]
  return result;
 8002536:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	fab2 f282 	clz	r2, r2
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	f042 0220 	orr.w	r2, r2, #32
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	f002 021f 	and.w	r2, r2, #31
 800254c:	2101      	movs	r1, #1
 800254e:	fa01 f202 	lsl.w	r2, r1, r2
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d19e      	bne.n	8002496 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002558:	4b2a      	ldr	r3, [pc, #168]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	430b      	orrs	r3, r1
 800256e:	4925      	ldr	r1, [pc, #148]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
 8002574:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002578:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800257c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fa93 f2a3 	rbit	r2, r3
 8002588:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800258c:	601a      	str	r2, [r3, #0]
  return result;
 800258e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002592:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800259e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	461a      	mov	r2, r3
 80025a6:	2301      	movs	r3, #1
 80025a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7fe ff79 	bl	80014a0 <HAL_GetTick>
 80025ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b2:	e009      	b.n	80025c8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b4:	f7fe ff74 	bl	80014a0 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e0fc      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
 80025c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	fa93 f2a3 	rbit	r2, r3
 80025dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025e0:	601a      	str	r2, [r3, #0]
  return result;
 80025e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d105      	bne.n	8002608 <HAL_RCC_OscConfig+0xc48>
 80025fc:	4b01      	ldr	r3, [pc, #4]	; (8002604 <HAL_RCC_OscConfig+0xc44>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	e01e      	b.n	8002640 <HAL_RCC_OscConfig+0xc80>
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
 8002608:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800260c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fa93 f2a3 	rbit	r2, r3
 800261c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002626:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	fa93 f2a3 	rbit	r2, r3
 8002636:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	4b63      	ldr	r3, [pc, #396]	; (80027cc <HAL_RCC_OscConfig+0xe0c>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002644:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002648:	6011      	str	r1, [r2, #0]
 800264a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	fa92 f1a2 	rbit	r1, r2
 8002654:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002658:	6011      	str	r1, [r2, #0]
  return result;
 800265a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	fab2 f282 	clz	r2, r2
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	f042 0220 	orr.w	r2, r2, #32
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	f002 021f 	and.w	r2, r2, #31
 8002670:	2101      	movs	r1, #1
 8002672:	fa01 f202 	lsl.w	r2, r1, r2
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d09b      	beq.n	80025b4 <HAL_RCC_OscConfig+0xbf4>
 800267c:	e0a0      	b.n	80027c0 <HAL_RCC_OscConfig+0xe00>
 800267e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002682:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002686:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	fa93 f2a3 	rbit	r2, r3
 8002692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002696:	601a      	str	r2, [r3, #0]
  return result;
 8002698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800269c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	461a      	mov	r2, r3
 80026b0:	2300      	movs	r3, #0
 80026b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7fe fef4 	bl	80014a0 <HAL_GetTick>
 80026b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026bc:	e009      	b.n	80026d2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026be:	f7fe feef 	bl	80014a0 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e077      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
 80026d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	fa93 f2a3 	rbit	r2, r3
 80026e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ea:	601a      	str	r2, [r3, #0]
  return result;
 80026ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	095b      	lsrs	r3, r3, #5
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d102      	bne.n	800270c <HAL_RCC_OscConfig+0xd4c>
 8002706:	4b31      	ldr	r3, [pc, #196]	; (80027cc <HAL_RCC_OscConfig+0xe0c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	e01b      	b.n	8002744 <HAL_RCC_OscConfig+0xd84>
 800270c:	f107 0320 	add.w	r3, r7, #32
 8002710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	f107 0320 	add.w	r3, r7, #32
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	fa93 f2a3 	rbit	r2, r3
 8002720:	f107 031c 	add.w	r3, r7, #28
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	f107 0318 	add.w	r3, r7, #24
 800272a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	f107 0318 	add.w	r3, r7, #24
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	fa93 f2a3 	rbit	r2, r3
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_RCC_OscConfig+0xe0c>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f107 0210 	add.w	r2, r7, #16
 8002748:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800274c:	6011      	str	r1, [r2, #0]
 800274e:	f107 0210 	add.w	r2, r7, #16
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	fa92 f1a2 	rbit	r1, r2
 8002758:	f107 020c 	add.w	r2, r7, #12
 800275c:	6011      	str	r1, [r2, #0]
  return result;
 800275e:	f107 020c 	add.w	r2, r7, #12
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	fab2 f282 	clz	r2, r2
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	f042 0220 	orr.w	r2, r2, #32
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	f002 021f 	and.w	r2, r2, #31
 8002774:	2101      	movs	r1, #1
 8002776:	fa01 f202 	lsl.w	r2, r1, r2
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d19e      	bne.n	80026be <HAL_RCC_OscConfig+0xcfe>
 8002780:	e01e      	b.n	80027c0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e018      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_RCC_OscConfig+0xe0c>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002798:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800279c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d108      	bne.n	80027bc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80027aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000

080027d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b09e      	sub	sp, #120	; 0x78
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e162      	b.n	8002aae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e8:	4b90      	ldr	r3, [pc, #576]	; (8002a2c <HAL_RCC_ClockConfig+0x25c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d910      	bls.n	8002818 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b8d      	ldr	r3, [pc, #564]	; (8002a2c <HAL_RCC_ClockConfig+0x25c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 0207 	bic.w	r2, r3, #7
 80027fe:	498b      	ldr	r1, [pc, #556]	; (8002a2c <HAL_RCC_ClockConfig+0x25c>)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b89      	ldr	r3, [pc, #548]	; (8002a2c <HAL_RCC_ClockConfig+0x25c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e14a      	b.n	8002aae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002824:	4b82      	ldr	r3, [pc, #520]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	497f      	ldr	r1, [pc, #508]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 80dc 	beq.w	80029fc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d13c      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xf6>
 800284c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002850:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800285a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d102      	bne.n	8002876 <HAL_RCC_ClockConfig+0xa6>
 8002870:	4b6f      	ldr	r3, [pc, #444]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	e00f      	b.n	8002896 <HAL_RCC_ClockConfig+0xc6>
 8002876:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800287a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	667b      	str	r3, [r7, #100]	; 0x64
 8002884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002888:	663b      	str	r3, [r7, #96]	; 0x60
 800288a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002892:	4b67      	ldr	r3, [pc, #412]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800289a:	65ba      	str	r2, [r7, #88]	; 0x58
 800289c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800289e:	fa92 f2a2 	rbit	r2, r2
 80028a2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80028a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028a6:	fab2 f282 	clz	r2, r2
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	f042 0220 	orr.w	r2, r2, #32
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	f002 021f 	and.w	r2, r2, #31
 80028b6:	2101      	movs	r1, #1
 80028b8:	fa01 f202 	lsl.w	r2, r1, r2
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d17b      	bne.n	80029ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0f3      	b.n	8002aae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d13c      	bne.n	8002948 <HAL_RCC_ClockConfig+0x178>
 80028ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d102      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x128>
 80028f2:	4b4f      	ldr	r3, [pc, #316]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	e00f      	b.n	8002918 <HAL_RCC_ClockConfig+0x148>
 80028f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	647b      	str	r3, [r7, #68]	; 0x44
 8002906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290a:	643b      	str	r3, [r7, #64]	; 0x40
 800290c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002914:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800291c:	63ba      	str	r2, [r7, #56]	; 0x38
 800291e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002920:	fa92 f2a2 	rbit	r2, r2
 8002924:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002928:	fab2 f282 	clz	r2, r2
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	f042 0220 	orr.w	r2, r2, #32
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	f002 021f 	and.w	r2, r2, #31
 8002938:	2101      	movs	r1, #1
 800293a:	fa01 f202 	lsl.w	r2, r1, r2
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d13a      	bne.n	80029ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0b2      	b.n	8002aae <HAL_RCC_ClockConfig+0x2de>
 8002948:	2302      	movs	r3, #2
 800294a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d102      	bne.n	8002970 <HAL_RCC_ClockConfig+0x1a0>
 800296a:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	e00d      	b.n	800298c <HAL_RCC_ClockConfig+0x1bc>
 8002970:	2302      	movs	r3, #2
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
 800297c:	2302      	movs	r3, #2
 800297e:	623b      	str	r3, [r7, #32]
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	2202      	movs	r2, #2
 800298e:	61ba      	str	r2, [r7, #24]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	fa92 f2a2 	rbit	r2, r2
 8002996:	617a      	str	r2, [r7, #20]
  return result;
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	fab2 f282 	clz	r2, r2
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	f042 0220 	orr.w	r2, r2, #32
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	f002 021f 	and.w	r2, r2, #31
 80029aa:	2101      	movs	r1, #1
 80029ac:	fa01 f202 	lsl.w	r2, r1, r2
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e079      	b.n	8002aae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ba:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	491a      	ldr	r1, [pc, #104]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029cc:	f7fe fd68 	bl	80014a0 <HAL_GetTick>
 80029d0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7fe fd64 	bl	80014a0 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e061      	b.n	8002aae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <HAL_RCC_ClockConfig+0x260>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 020c 	and.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1eb      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_RCC_ClockConfig+0x25c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d214      	bcs.n	8002a34 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <HAL_RCC_ClockConfig+0x25c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 0207 	bic.w	r2, r3, #7
 8002a12:	4906      	ldr	r1, [pc, #24]	; (8002a2c <HAL_RCC_ClockConfig+0x25c>)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <HAL_RCC_ClockConfig+0x25c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e040      	b.n	8002aae <HAL_RCC_ClockConfig+0x2de>
 8002a2c:	40022000 	.word	0x40022000
 8002a30:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a40:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	491a      	ldr	r1, [pc, #104]	; (8002ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a5e:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4912      	ldr	r1, [pc, #72]	; (8002ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a72:	f000 f829 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8002a76:	4601      	mov	r1, r0
 8002a78:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a80:	22f0      	movs	r2, #240	; 0xf0
 8002a82:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	fa92 f2a2 	rbit	r2, r2
 8002a8a:	60fa      	str	r2, [r7, #12]
  return result;
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	fab2 f282 	clz	r2, r2
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	40d3      	lsrs	r3, r2
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x2ec>)
 8002a98:	5cd3      	ldrb	r3, [r2, r3]
 8002a9a:	fa21 f303 	lsr.w	r3, r1, r3
 8002a9e:	4a08      	ldr	r2, [pc, #32]	; (8002ac0 <HAL_RCC_ClockConfig+0x2f0>)
 8002aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002aa2:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <HAL_RCC_ClockConfig+0x2f4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe fcb6 	bl	8001418 <HAL_InitTick>
  
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3778      	adds	r7, #120	; 0x78
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	080059d8 	.word	0x080059d8
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	20000004 	.word	0x20000004

08002ac8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b08b      	sub	sp, #44	; 0x2c
 8002acc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ae2:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d002      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x30>
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x36>
 8002af6:	e03c      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002af8:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002afa:	623b      	str	r3, [r7, #32]
      break;
 8002afc:	e03c      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b04:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b08:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	fa92 f2a2 	rbit	r2, r2
 8002b10:	607a      	str	r2, [r7, #4]
  return result;
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	fab2 f282 	clz	r2, r2
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	40d3      	lsrs	r3, r2
 8002b1c:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b1e:	5cd3      	ldrb	r3, [r2, r3]
 8002b20:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b22:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	fa92 f2a2 	rbit	r2, r2
 8002b34:	60fa      	str	r2, [r7, #12]
  return result;
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	fab2 f282 	clz	r2, r2
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	40d3      	lsrs	r3, r2
 8002b40:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b42:	5cd3      	ldrb	r3, [r2, r3]
 8002b44:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b50:	4a0e      	ldr	r2, [pc, #56]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fb02 f303 	mul.w	r3, r2, r3
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b60:	e004      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	4a0c      	ldr	r2, [pc, #48]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b66:	fb02 f303 	mul.w	r3, r2, r3
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	623b      	str	r3, [r7, #32]
      break;
 8002b70:	e002      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b74:	623b      	str	r3, [r7, #32]
      break;
 8002b76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b78:	6a3b      	ldr	r3, [r7, #32]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	372c      	adds	r7, #44	; 0x2c
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	007a1200 	.word	0x007a1200
 8002b90:	080059f0 	.word	0x080059f0
 8002b94:	08005a00 	.word	0x08005a00
 8002b98:	003d0900 	.word	0x003d0900

08002b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000000 	.word	0x20000000

08002bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002bba:	f7ff ffef 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002bbe:	4601      	mov	r1, r0
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bc8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bcc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	fa92 f2a2 	rbit	r2, r2
 8002bd4:	603a      	str	r2, [r7, #0]
  return result;
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	fab2 f282 	clz	r2, r2
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	40d3      	lsrs	r3, r2
 8002be0:	4a04      	ldr	r2, [pc, #16]	; (8002bf4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002be2:	5cd3      	ldrb	r3, [r2, r3]
 8002be4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	080059e8 	.word	0x080059e8

08002bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002bfe:	f7ff ffcd 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002c02:	4601      	mov	r1, r0
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002c0c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	fa92 f2a2 	rbit	r2, r2
 8002c18:	603a      	str	r2, [r7, #0]
  return result;
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	fab2 f282 	clz	r2, r2
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	40d3      	lsrs	r3, r2
 8002c24:	4a04      	ldr	r2, [pc, #16]	; (8002c38 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c26:	5cd3      	ldrb	r3, [r2, r3]
 8002c28:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000
 8002c38:	080059e8 	.word	0x080059e8

08002c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b092      	sub	sp, #72	; 0x48
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80d0 	beq.w	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c60:	4b86      	ldr	r3, [pc, #536]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10e      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6c:	4b83      	ldr	r3, [pc, #524]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	4a82      	ldr	r2, [pc, #520]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c76:	61d3      	str	r3, [r2, #28]
 8002c78:	4b80      	ldr	r3, [pc, #512]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8a:	4b7d      	ldr	r3, [pc, #500]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d118      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c96:	4b7a      	ldr	r3, [pc, #488]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a79      	ldr	r2, [pc, #484]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca2:	f7fe fbfd 	bl	80014a0 <HAL_GetTick>
 8002ca6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	e008      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002caa:	f7fe fbf9 	bl	80014a0 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b64      	cmp	r3, #100	; 0x64
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0db      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbc:	4b70      	ldr	r3, [pc, #448]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cc8:	4b6c      	ldr	r3, [pc, #432]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d07d      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d076      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ce6:	4b65      	ldr	r3, [pc, #404]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cf4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	4b5e      	ldr	r3, [pc, #376]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	461a      	mov	r2, r3
 8002d10:	2301      	movs	r3, #1
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1c:	fa93 f3a3 	rbit	r3, r3
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d24:	fab3 f383 	clz	r3, r3
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b55      	ldr	r3, [pc, #340]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	461a      	mov	r2, r3
 8002d34:	2300      	movs	r3, #0
 8002d36:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d38:	4a50      	ldr	r2, [pc, #320]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d3c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d045      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7fe fbaa 	bl	80014a0 <HAL_GetTick>
 8002d4c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4e:	e00a      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d50:	f7fe fba6 	bl	80014a0 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e086      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002d66:	2302      	movs	r3, #2
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
 8002d72:	2302      	movs	r3, #2
 8002d74:	623b      	str	r3, [r7, #32]
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	61fb      	str	r3, [r7, #28]
  return result;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d80:	fab3 f383 	clz	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f043 0302 	orr.w	r3, r3, #2
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d102      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002d94:	4b39      	ldr	r3, [pc, #228]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	e007      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	4b35      	ldr	r3, [pc, #212]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	2202      	movs	r2, #2
 8002dac:	613a      	str	r2, [r7, #16]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	fa92 f2a2 	rbit	r2, r2
 8002db4:	60fa      	str	r2, [r7, #12]
  return result;
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	fab2 f282 	clz	r2, r2
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	f002 021f 	and.w	r2, r2, #31
 8002dc8:	2101      	movs	r1, #1
 8002dca:	fa01 f202 	lsl.w	r2, r1, r2
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0bd      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002dd4:	4b29      	ldr	r3, [pc, #164]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4926      	ldr	r1, [pc, #152]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002de6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d105      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dee:	4b23      	ldr	r3, [pc, #140]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	4a22      	ldr	r2, [pc, #136]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f023 0203 	bic.w	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	491a      	ldr	r1, [pc, #104]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	f023 0210 	bic.w	r2, r3, #16
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4912      	ldr	r1, [pc, #72]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d008      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e46:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	490b      	ldr	r1, [pc, #44]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	4903      	ldr	r1, [pc, #12]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3748      	adds	r7, #72	; 0x48
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40007000 	.word	0x40007000
 8002e84:	10908100 	.word	0x10908100

08002e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e01d      	b.n	8002ed6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fe f896 	bl	8000fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	f000 fd24 	bl	8003914 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e01d      	b.n	8002f2c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d106      	bne.n	8002f0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f815 	bl	8002f34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	f000 fcf9 	bl	8003914 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2201      	movs	r2, #1
 8002f58:	6839      	ldr	r1, [r7, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f001 f9a4 	bl	80042a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1c      	ldr	r2, [pc, #112]	; (8002fd8 <HAL_TIM_PWM_Start+0x90>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00e      	beq.n	8002f88 <HAL_TIM_PWM_Start+0x40>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <HAL_TIM_PWM_Start+0x94>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d009      	beq.n	8002f88 <HAL_TIM_PWM_Start+0x40>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <HAL_TIM_PWM_Start+0x98>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d004      	beq.n	8002f88 <HAL_TIM_PWM_Start+0x40>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <HAL_TIM_PWM_Start+0x9c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d101      	bne.n	8002f8c <HAL_TIM_PWM_Start+0x44>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <HAL_TIM_PWM_Start+0x46>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fa0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <HAL_TIM_PWM_Start+0xa0>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b06      	cmp	r3, #6
 8002fb2:	d00b      	beq.n	8002fcc <HAL_TIM_PWM_Start+0x84>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fba:	d007      	beq.n	8002fcc <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40012c00 	.word	0x40012c00
 8002fdc:	40014000 	.word	0x40014000
 8002fe0:	40014400 	.word	0x40014400
 8002fe4:	40014800 	.word	0x40014800
 8002fe8:	00010007 	.word	0x00010007

08002fec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e01d      	b.n	800303a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe f804 	bl	8001020 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f000 fc72 	bl	8003914 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b0c      	cmp	r3, #12
 8003052:	d841      	bhi.n	80030d8 <HAL_TIM_IC_Start_IT+0x94>
 8003054:	a201      	add	r2, pc, #4	; (adr r2, 800305c <HAL_TIM_IC_Start_IT+0x18>)
 8003056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305a:	bf00      	nop
 800305c:	08003091 	.word	0x08003091
 8003060:	080030d9 	.word	0x080030d9
 8003064:	080030d9 	.word	0x080030d9
 8003068:	080030d9 	.word	0x080030d9
 800306c:	080030a3 	.word	0x080030a3
 8003070:	080030d9 	.word	0x080030d9
 8003074:	080030d9 	.word	0x080030d9
 8003078:	080030d9 	.word	0x080030d9
 800307c:	080030b5 	.word	0x080030b5
 8003080:	080030d9 	.word	0x080030d9
 8003084:	080030d9 	.word	0x080030d9
 8003088:	080030d9 	.word	0x080030d9
 800308c:	080030c7 	.word	0x080030c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0202 	orr.w	r2, r2, #2
 800309e:	60da      	str	r2, [r3, #12]
      break;
 80030a0:	e01b      	b.n	80030da <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0204 	orr.w	r2, r2, #4
 80030b0:	60da      	str	r2, [r3, #12]
      break;
 80030b2:	e012      	b.n	80030da <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0208 	orr.w	r2, r2, #8
 80030c2:	60da      	str	r2, [r3, #12]
      break;
 80030c4:	e009      	b.n	80030da <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0210 	orr.w	r2, r2, #16
 80030d4:	60da      	str	r2, [r3, #12]
      break;
 80030d6:	e000      	b.n	80030da <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80030d8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2201      	movs	r2, #1
 80030e0:	6839      	ldr	r1, [r7, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f001 f8e0 	bl	80042a8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	4b0b      	ldr	r3, [pc, #44]	; (800311c <HAL_TIM_IC_Start_IT+0xd8>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b06      	cmp	r3, #6
 80030f8:	d00b      	beq.n	8003112 <HAL_TIM_IC_Start_IT+0xce>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003100:	d007      	beq.n	8003112 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0201 	orr.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	00010007 	.word	0x00010007

08003120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b02      	cmp	r3, #2
 8003134:	d122      	bne.n	800317c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b02      	cmp	r3, #2
 8003142:	d11b      	bne.n	800317c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0202 	mvn.w	r2, #2
 800314c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fd fce0 	bl	8000b28 <HAL_TIM_IC_CaptureCallback>
 8003168:	e005      	b.n	8003176 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fbb4 	bl	80038d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fbbb 	bl	80038ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d122      	bne.n	80031d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b04      	cmp	r3, #4
 8003196:	d11b      	bne.n	80031d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0204 	mvn.w	r2, #4
 80031a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2202      	movs	r2, #2
 80031a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7fd fcb6 	bl	8000b28 <HAL_TIM_IC_CaptureCallback>
 80031bc:	e005      	b.n	80031ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fb8a 	bl	80038d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fb91 	bl	80038ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d122      	bne.n	8003224 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d11b      	bne.n	8003224 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0208 	mvn.w	r2, #8
 80031f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2204      	movs	r2, #4
 80031fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd fc8c 	bl	8000b28 <HAL_TIM_IC_CaptureCallback>
 8003210:	e005      	b.n	800321e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fb60 	bl	80038d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 fb67 	bl	80038ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b10      	cmp	r3, #16
 8003230:	d122      	bne.n	8003278 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b10      	cmp	r3, #16
 800323e:	d11b      	bne.n	8003278 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0210 	mvn.w	r2, #16
 8003248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2208      	movs	r2, #8
 800324e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fd fc62 	bl	8000b28 <HAL_TIM_IC_CaptureCallback>
 8003264:	e005      	b.n	8003272 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 fb36 	bl	80038d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fb3d 	bl	80038ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d10e      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d107      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0201 	mvn.w	r2, #1
 800329c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fb10 	bl	80038c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ae:	2b80      	cmp	r3, #128	; 0x80
 80032b0:	d10e      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032bc:	2b80      	cmp	r3, #128	; 0x80
 80032be:	d107      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f001 f902 	bl	80044d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032de:	d10e      	bne.n	80032fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ea:	2b80      	cmp	r3, #128	; 0x80
 80032ec:	d107      	bne.n	80032fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f001 f8f5 	bl	80044e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d10e      	bne.n	800332a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	d107      	bne.n	800332a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 faeb 	bl	8003900 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b20      	cmp	r3, #32
 8003336:	d10e      	bne.n	8003356 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b20      	cmp	r3, #32
 8003344:	d107      	bne.n	8003356 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f06f 0220 	mvn.w	r2, #32
 800334e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f001 f8b5 	bl	80044c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003374:	2302      	movs	r3, #2
 8003376:	e08a      	b.n	800348e <HAL_TIM_IC_ConfigChannel+0x130>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d11b      	bne.n	80033c6 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	6819      	ldr	r1, [r3, #0]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f000 fdd7 	bl	8003f50 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699a      	ldr	r2, [r3, #24]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 020c 	bic.w	r2, r2, #12
 80033b0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6999      	ldr	r1, [r3, #24]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	619a      	str	r2, [r3, #24]
 80033c4:	e05a      	b.n	800347c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d11c      	bne.n	8003406 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	6819      	ldr	r1, [r3, #0]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f000 fe43 	bl	8004066 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80033ee:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6999      	ldr	r1, [r3, #24]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	021a      	lsls	r2, r3, #8
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	619a      	str	r2, [r3, #24]
 8003404:	e03a      	b.n	800347c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b08      	cmp	r3, #8
 800340a:	d11b      	bne.n	8003444 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	6819      	ldr	r1, [r3, #0]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f000 fe90 	bl	8004140 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	69da      	ldr	r2, [r3, #28]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 020c 	bic.w	r2, r2, #12
 800342e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69d9      	ldr	r1, [r3, #28]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	61da      	str	r2, [r3, #28]
 8003442:	e01b      	b.n	800347c <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	6819      	ldr	r1, [r3, #0]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f000 feb0 	bl	80041b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69da      	ldr	r2, [r3, #28]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003466:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69d9      	ldr	r1, [r3, #28]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	021a      	lsls	r2, r3, #8
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e105      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x226>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b14      	cmp	r3, #20
 80034c6:	f200 80f0 	bhi.w	80036aa <HAL_TIM_PWM_ConfigChannel+0x212>
 80034ca:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80034cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d0:	08003525 	.word	0x08003525
 80034d4:	080036ab 	.word	0x080036ab
 80034d8:	080036ab 	.word	0x080036ab
 80034dc:	080036ab 	.word	0x080036ab
 80034e0:	08003565 	.word	0x08003565
 80034e4:	080036ab 	.word	0x080036ab
 80034e8:	080036ab 	.word	0x080036ab
 80034ec:	080036ab 	.word	0x080036ab
 80034f0:	080035a7 	.word	0x080035a7
 80034f4:	080036ab 	.word	0x080036ab
 80034f8:	080036ab 	.word	0x080036ab
 80034fc:	080036ab 	.word	0x080036ab
 8003500:	080035e7 	.word	0x080035e7
 8003504:	080036ab 	.word	0x080036ab
 8003508:	080036ab 	.word	0x080036ab
 800350c:	080036ab 	.word	0x080036ab
 8003510:	08003629 	.word	0x08003629
 8003514:	080036ab 	.word	0x080036ab
 8003518:	080036ab 	.word	0x080036ab
 800351c:	080036ab 	.word	0x080036ab
 8003520:	08003669 	.word	0x08003669
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fa6a 	bl	8003a04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0208 	orr.w	r2, r2, #8
 800353e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0204 	bic.w	r2, r2, #4
 800354e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6999      	ldr	r1, [r3, #24]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	619a      	str	r2, [r3, #24]
      break;
 8003562:	e0a3      	b.n	80036ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fad0 	bl	8003b10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800357e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800358e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6999      	ldr	r1, [r3, #24]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	021a      	lsls	r2, r3, #8
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	619a      	str	r2, [r3, #24]
      break;
 80035a4:	e082      	b.n	80036ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fb2f 	bl	8003c10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0208 	orr.w	r2, r2, #8
 80035c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0204 	bic.w	r2, r2, #4
 80035d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69d9      	ldr	r1, [r3, #28]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	61da      	str	r2, [r3, #28]
      break;
 80035e4:	e062      	b.n	80036ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fb8d 	bl	8003d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69da      	ldr	r2, [r3, #28]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69da      	ldr	r2, [r3, #28]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69d9      	ldr	r1, [r3, #28]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	021a      	lsls	r2, r3, #8
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	61da      	str	r2, [r3, #28]
      break;
 8003626:	e041      	b.n	80036ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fbd0 	bl	8003dd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0208 	orr.w	r2, r2, #8
 8003642:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0204 	bic.w	r2, r2, #4
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003666:	e021      	b.n	80036ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68b9      	ldr	r1, [r7, #8]
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fc0e 	bl	8003e90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003682:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003692:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	021a      	lsls	r2, r3, #8
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036a8:	e000      	b.n	80036ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80036aa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop

080036c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_TIM_ConfigClockSource+0x18>
 80036dc:	2302      	movs	r3, #2
 80036de:	e0a8      	b.n	8003832 <HAL_TIM_ConfigClockSource+0x16a>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003702:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800370a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b40      	cmp	r3, #64	; 0x40
 800371a:	d067      	beq.n	80037ec <HAL_TIM_ConfigClockSource+0x124>
 800371c:	2b40      	cmp	r3, #64	; 0x40
 800371e:	d80b      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x70>
 8003720:	2b10      	cmp	r3, #16
 8003722:	d073      	beq.n	800380c <HAL_TIM_ConfigClockSource+0x144>
 8003724:	2b10      	cmp	r3, #16
 8003726:	d802      	bhi.n	800372e <HAL_TIM_ConfigClockSource+0x66>
 8003728:	2b00      	cmp	r3, #0
 800372a:	d06f      	beq.n	800380c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800372c:	e078      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800372e:	2b20      	cmp	r3, #32
 8003730:	d06c      	beq.n	800380c <HAL_TIM_ConfigClockSource+0x144>
 8003732:	2b30      	cmp	r3, #48	; 0x30
 8003734:	d06a      	beq.n	800380c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003736:	e073      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003738:	2b70      	cmp	r3, #112	; 0x70
 800373a:	d00d      	beq.n	8003758 <HAL_TIM_ConfigClockSource+0x90>
 800373c:	2b70      	cmp	r3, #112	; 0x70
 800373e:	d804      	bhi.n	800374a <HAL_TIM_ConfigClockSource+0x82>
 8003740:	2b50      	cmp	r3, #80	; 0x50
 8003742:	d033      	beq.n	80037ac <HAL_TIM_ConfigClockSource+0xe4>
 8003744:	2b60      	cmp	r3, #96	; 0x60
 8003746:	d041      	beq.n	80037cc <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003748:	e06a      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800374a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374e:	d066      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x156>
 8003750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003754:	d017      	beq.n	8003786 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003756:	e063      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	6899      	ldr	r1, [r3, #8]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f000 fd7e 	bl	8004268 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800377a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	609a      	str	r2, [r3, #8]
      break;
 8003784:	e04c      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	6899      	ldr	r1, [r3, #8]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f000 fd67 	bl	8004268 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037a8:	609a      	str	r2, [r3, #8]
      break;
 80037aa:	e039      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	461a      	mov	r2, r3
 80037ba:	f000 fc25 	bl	8004008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2150      	movs	r1, #80	; 0x50
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fd34 	bl	8004232 <TIM_ITRx_SetConfig>
      break;
 80037ca:	e029      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	6859      	ldr	r1, [r3, #4]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	461a      	mov	r2, r3
 80037da:	f000 fc81 	bl	80040e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2160      	movs	r1, #96	; 0x60
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fd24 	bl	8004232 <TIM_ITRx_SetConfig>
      break;
 80037ea:	e019      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	6859      	ldr	r1, [r3, #4]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	461a      	mov	r2, r3
 80037fa:	f000 fc05 	bl	8004008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2140      	movs	r1, #64	; 0x40
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fd14 	bl	8004232 <TIM_ITRx_SetConfig>
      break;
 800380a:	e009      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f000 fd0b 	bl	8004232 <TIM_ITRx_SetConfig>
      break;
 800381c:	e000      	b.n	8003820 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800381e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b0c      	cmp	r3, #12
 800384e:	d831      	bhi.n	80038b4 <HAL_TIM_ReadCapturedValue+0x78>
 8003850:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003856:	bf00      	nop
 8003858:	0800388d 	.word	0x0800388d
 800385c:	080038b5 	.word	0x080038b5
 8003860:	080038b5 	.word	0x080038b5
 8003864:	080038b5 	.word	0x080038b5
 8003868:	08003897 	.word	0x08003897
 800386c:	080038b5 	.word	0x080038b5
 8003870:	080038b5 	.word	0x080038b5
 8003874:	080038b5 	.word	0x080038b5
 8003878:	080038a1 	.word	0x080038a1
 800387c:	080038b5 	.word	0x080038b5
 8003880:	080038b5 	.word	0x080038b5
 8003884:	080038b5 	.word	0x080038b5
 8003888:	080038ab 	.word	0x080038ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003892:	60fb      	str	r3, [r7, #12]

      break;
 8003894:	e00f      	b.n	80038b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	60fb      	str	r3, [r7, #12]

      break;
 800389e:	e00a      	b.n	80038b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a6:	60fb      	str	r3, [r7, #12]

      break;
 80038a8:	e005      	b.n	80038b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	60fb      	str	r3, [r7, #12]

      break;
 80038b2:	e000      	b.n	80038b6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80038b4:	bf00      	nop
  }

  return tmpreg;
 80038b6:	68fb      	ldr	r3, [r7, #12]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a32      	ldr	r2, [pc, #200]	; (80039f0 <TIM_Base_SetConfig+0xdc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d007      	beq.n	800393c <TIM_Base_SetConfig+0x28>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003932:	d003      	beq.n	800393c <TIM_Base_SetConfig+0x28>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a2f      	ldr	r2, [pc, #188]	; (80039f4 <TIM_Base_SetConfig+0xe0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d108      	bne.n	800394e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a27      	ldr	r2, [pc, #156]	; (80039f0 <TIM_Base_SetConfig+0xdc>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d013      	beq.n	800397e <TIM_Base_SetConfig+0x6a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395c:	d00f      	beq.n	800397e <TIM_Base_SetConfig+0x6a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a24      	ldr	r2, [pc, #144]	; (80039f4 <TIM_Base_SetConfig+0xe0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00b      	beq.n	800397e <TIM_Base_SetConfig+0x6a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a23      	ldr	r2, [pc, #140]	; (80039f8 <TIM_Base_SetConfig+0xe4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d007      	beq.n	800397e <TIM_Base_SetConfig+0x6a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a22      	ldr	r2, [pc, #136]	; (80039fc <TIM_Base_SetConfig+0xe8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d003      	beq.n	800397e <TIM_Base_SetConfig+0x6a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a21      	ldr	r2, [pc, #132]	; (8003a00 <TIM_Base_SetConfig+0xec>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d108      	bne.n	8003990 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a0e      	ldr	r2, [pc, #56]	; (80039f0 <TIM_Base_SetConfig+0xdc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00b      	beq.n	80039d4 <TIM_Base_SetConfig+0xc0>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a0e      	ldr	r2, [pc, #56]	; (80039f8 <TIM_Base_SetConfig+0xe4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d007      	beq.n	80039d4 <TIM_Base_SetConfig+0xc0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a0d      	ldr	r2, [pc, #52]	; (80039fc <TIM_Base_SetConfig+0xe8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_Base_SetConfig+0xc0>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a0c      	ldr	r2, [pc, #48]	; (8003a00 <TIM_Base_SetConfig+0xec>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d103      	bne.n	80039dc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	615a      	str	r2, [r3, #20]
}
 80039e2:	bf00      	nop
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40012c00 	.word	0x40012c00
 80039f4:	40000400 	.word	0x40000400
 80039f8:	40014000 	.word	0x40014000
 80039fc:	40014400 	.word	0x40014400
 8003a00:	40014800 	.word	0x40014800

08003a04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f023 0201 	bic.w	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0303 	bic.w	r3, r3, #3
 8003a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f023 0302 	bic.w	r3, r3, #2
 8003a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a28      	ldr	r2, [pc, #160]	; (8003b00 <TIM_OC1_SetConfig+0xfc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00b      	beq.n	8003a7c <TIM_OC1_SetConfig+0x78>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a27      	ldr	r2, [pc, #156]	; (8003b04 <TIM_OC1_SetConfig+0x100>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d007      	beq.n	8003a7c <TIM_OC1_SetConfig+0x78>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a26      	ldr	r2, [pc, #152]	; (8003b08 <TIM_OC1_SetConfig+0x104>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d003      	beq.n	8003a7c <TIM_OC1_SetConfig+0x78>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a25      	ldr	r2, [pc, #148]	; (8003b0c <TIM_OC1_SetConfig+0x108>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d10c      	bne.n	8003a96 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f023 0308 	bic.w	r3, r3, #8
 8003a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f023 0304 	bic.w	r3, r3, #4
 8003a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a19      	ldr	r2, [pc, #100]	; (8003b00 <TIM_OC1_SetConfig+0xfc>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00b      	beq.n	8003ab6 <TIM_OC1_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a18      	ldr	r2, [pc, #96]	; (8003b04 <TIM_OC1_SetConfig+0x100>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d007      	beq.n	8003ab6 <TIM_OC1_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a17      	ldr	r2, [pc, #92]	; (8003b08 <TIM_OC1_SetConfig+0x104>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d003      	beq.n	8003ab6 <TIM_OC1_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a16      	ldr	r2, [pc, #88]	; (8003b0c <TIM_OC1_SetConfig+0x108>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d111      	bne.n	8003ada <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	621a      	str	r2, [r3, #32]
}
 8003af4:	bf00      	nop
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	40012c00 	.word	0x40012c00
 8003b04:	40014000 	.word	0x40014000
 8003b08:	40014400 	.word	0x40014400
 8003b0c:	40014800 	.word	0x40014800

08003b10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	f023 0210 	bic.w	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f023 0320 	bic.w	r3, r3, #32
 8003b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a24      	ldr	r2, [pc, #144]	; (8003c00 <TIM_OC2_SetConfig+0xf0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d10d      	bne.n	8003b90 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <TIM_OC2_SetConfig+0xf0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00b      	beq.n	8003bb0 <TIM_OC2_SetConfig+0xa0>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a1a      	ldr	r2, [pc, #104]	; (8003c04 <TIM_OC2_SetConfig+0xf4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d007      	beq.n	8003bb0 <TIM_OC2_SetConfig+0xa0>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a19      	ldr	r2, [pc, #100]	; (8003c08 <TIM_OC2_SetConfig+0xf8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d003      	beq.n	8003bb0 <TIM_OC2_SetConfig+0xa0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <TIM_OC2_SetConfig+0xfc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d113      	bne.n	8003bd8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bb6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bbe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40012c00 	.word	0x40012c00
 8003c04:	40014000 	.word	0x40014000
 8003c08:	40014400 	.word	0x40014400
 8003c0c:	40014800 	.word	0x40014800

08003c10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0303 	bic.w	r3, r3, #3
 8003c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	021b      	lsls	r3, r3, #8
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a23      	ldr	r2, [pc, #140]	; (8003cfc <TIM_OC3_SetConfig+0xec>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d10d      	bne.n	8003c8e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c8c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a1a      	ldr	r2, [pc, #104]	; (8003cfc <TIM_OC3_SetConfig+0xec>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00b      	beq.n	8003cae <TIM_OC3_SetConfig+0x9e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a19      	ldr	r2, [pc, #100]	; (8003d00 <TIM_OC3_SetConfig+0xf0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d007      	beq.n	8003cae <TIM_OC3_SetConfig+0x9e>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <TIM_OC3_SetConfig+0xf4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d003      	beq.n	8003cae <TIM_OC3_SetConfig+0x9e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <TIM_OC3_SetConfig+0xf8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d113      	bne.n	8003cd6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	621a      	str	r2, [r3, #32]
}
 8003cf0:	bf00      	nop
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40012c00 	.word	0x40012c00
 8003d00:	40014000 	.word	0x40014000
 8003d04:	40014400 	.word	0x40014400
 8003d08:	40014800 	.word	0x40014800

08003d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	031b      	lsls	r3, r3, #12
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a16      	ldr	r2, [pc, #88]	; (8003dc4 <TIM_OC4_SetConfig+0xb8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00b      	beq.n	8003d88 <TIM_OC4_SetConfig+0x7c>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <TIM_OC4_SetConfig+0xbc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d007      	beq.n	8003d88 <TIM_OC4_SetConfig+0x7c>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a14      	ldr	r2, [pc, #80]	; (8003dcc <TIM_OC4_SetConfig+0xc0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_OC4_SetConfig+0x7c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <TIM_OC4_SetConfig+0xc4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d109      	bne.n	8003d9c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	019b      	lsls	r3, r3, #6
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	621a      	str	r2, [r3, #32]
}
 8003db6:	bf00      	nop
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40014000 	.word	0x40014000
 8003dcc:	40014400 	.word	0x40014400
 8003dd0:	40014800 	.word	0x40014800

08003dd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	041b      	lsls	r3, r3, #16
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a15      	ldr	r2, [pc, #84]	; (8003e80 <TIM_OC5_SetConfig+0xac>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00b      	beq.n	8003e46 <TIM_OC5_SetConfig+0x72>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a14      	ldr	r2, [pc, #80]	; (8003e84 <TIM_OC5_SetConfig+0xb0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d007      	beq.n	8003e46 <TIM_OC5_SetConfig+0x72>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <TIM_OC5_SetConfig+0xb4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d003      	beq.n	8003e46 <TIM_OC5_SetConfig+0x72>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a12      	ldr	r2, [pc, #72]	; (8003e8c <TIM_OC5_SetConfig+0xb8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d109      	bne.n	8003e5a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	621a      	str	r2, [r3, #32]
}
 8003e74:	bf00      	nop
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	40012c00 	.word	0x40012c00
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40014400 	.word	0x40014400
 8003e8c:	40014800 	.word	0x40014800

08003e90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	051b      	lsls	r3, r3, #20
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a16      	ldr	r2, [pc, #88]	; (8003f40 <TIM_OC6_SetConfig+0xb0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00b      	beq.n	8003f04 <TIM_OC6_SetConfig+0x74>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a15      	ldr	r2, [pc, #84]	; (8003f44 <TIM_OC6_SetConfig+0xb4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d007      	beq.n	8003f04 <TIM_OC6_SetConfig+0x74>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a14      	ldr	r2, [pc, #80]	; (8003f48 <TIM_OC6_SetConfig+0xb8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d003      	beq.n	8003f04 <TIM_OC6_SetConfig+0x74>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a13      	ldr	r2, [pc, #76]	; (8003f4c <TIM_OC6_SetConfig+0xbc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d109      	bne.n	8003f18 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	029b      	lsls	r3, r3, #10
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	621a      	str	r2, [r3, #32]
}
 8003f32:	bf00      	nop
 8003f34:	371c      	adds	r7, #28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40012c00 	.word	0x40012c00
 8003f44:	40014000 	.word	0x40014000
 8003f48:	40014400 	.word	0x40014400
 8003f4c:	40014800 	.word	0x40014800

08003f50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	f023 0201 	bic.w	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4a20      	ldr	r2, [pc, #128]	; (8003ffc <TIM_TI1_SetConfig+0xac>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d00b      	beq.n	8003f96 <TIM_TI1_SetConfig+0x46>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f84:	d007      	beq.n	8003f96 <TIM_TI1_SetConfig+0x46>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4a1d      	ldr	r2, [pc, #116]	; (8004000 <TIM_TI1_SetConfig+0xb0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d003      	beq.n	8003f96 <TIM_TI1_SetConfig+0x46>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4a1c      	ldr	r2, [pc, #112]	; (8004004 <TIM_TI1_SetConfig+0xb4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d101      	bne.n	8003f9a <TIM_TI1_SetConfig+0x4a>
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <TIM_TI1_SetConfig+0x4c>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f023 0303 	bic.w	r3, r3, #3
 8003fa6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	e003      	b.n	8003fba <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f023 030a 	bic.w	r3, r3, #10
 8003fd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f003 030a 	and.w	r3, r3, #10
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	621a      	str	r2, [r3, #32]
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40012c00 	.word	0x40012c00
 8004000:	40000400 	.word	0x40000400
 8004004:	40014000 	.word	0x40014000

08004008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	f023 0201 	bic.w	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f023 030a 	bic.w	r3, r3, #10
 8004044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	621a      	str	r2, [r3, #32]
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004066:	b480      	push	{r7}
 8004068:	b087      	sub	sp, #28
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f023 0210 	bic.w	r2, r3, #16
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004092:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	031b      	lsls	r3, r3, #12
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	621a      	str	r2, [r3, #32]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f023 0210 	bic.w	r2, r3, #16
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800410a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	031b      	lsls	r3, r3, #12
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800411c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	621a      	str	r2, [r3, #32]
}
 8004134:	bf00      	nop
 8004136:	371c      	adds	r7, #28
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f023 0303 	bic.w	r3, r3, #3
 800416c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800417c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	b2db      	uxtb	r3, r3
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004190:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	021b      	lsls	r3, r3, #8
 8004196:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	621a      	str	r2, [r3, #32]
}
 80041ac:	bf00      	nop
 80041ae:	371c      	adds	r7, #28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	021b      	lsls	r3, r3, #8
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	031b      	lsls	r3, r3, #12
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800420a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	031b      	lsls	r3, r3, #12
 8004210:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	621a      	str	r2, [r3, #32]
}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004232:	b480      	push	{r7}
 8004234:	b085      	sub	sp, #20
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004248:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	f043 0307 	orr.w	r3, r3, #7
 8004254:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	609a      	str	r2, [r3, #8]
}
 800425c:	bf00      	nop
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004282:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	021a      	lsls	r2, r3, #8
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	431a      	orrs	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4313      	orrs	r3, r2
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	4313      	orrs	r3, r2
 8004294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	609a      	str	r2, [r3, #8]
}
 800429c:	bf00      	nop
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f003 031f 	and.w	r3, r3, #31
 80042ba:	2201      	movs	r2, #1
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a1a      	ldr	r2, [r3, #32]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	401a      	ands	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a1a      	ldr	r2, [r3, #32]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	fa01 f303 	lsl.w	r3, r1, r3
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004308:	2302      	movs	r3, #2
 800430a:	e054      	b.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a24      	ldr	r2, [pc, #144]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d108      	bne.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800433c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a17      	ldr	r2, [pc, #92]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00e      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d009      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a13      	ldr	r2, [pc, #76]	; (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a11      	ldr	r2, [pc, #68]	; (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10c      	bne.n	80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004390:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	4313      	orrs	r3, r2
 800439a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40012c00 	.word	0x40012c00
 80043c8:	40000400 	.word	0x40000400
 80043cc:	40014000 	.word	0x40014000

080043d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e060      	b.n	80044ae <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4313      	orrs	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	041b      	lsls	r3, r3, #16
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a14      	ldr	r2, [pc, #80]	; (80044bc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d115      	bne.n	800449c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	051b      	lsls	r3, r3, #20
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40012c00 	.word	0x40012c00

080044c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e040      	b.n	8004590 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fc fdfe 	bl	8001120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2224      	movs	r2, #36	; 0x24
 8004528:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f82c 	bl	8004598 <UART_SetConfig>
 8004540:	4603      	mov	r3, r0
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e022      	b.n	8004590 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f9a2 	bl	800489c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004566:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004576:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fa29 	bl	80049e0 <UART_CheckIdleState>
 800458e:	4603      	mov	r3, r0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4ba2      	ldr	r3, [pc, #648]	; (8004850 <UART_SetConfig+0x2b8>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6812      	ldr	r2, [r2, #0]
 80045ce:	6939      	ldr	r1, [r7, #16]
 80045d0:	430b      	orrs	r3, r1
 80045d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	430a      	orrs	r2, r1
 800460c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a90      	ldr	r2, [pc, #576]	; (8004854 <UART_SetConfig+0x2bc>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d121      	bne.n	800465c <UART_SetConfig+0xc4>
 8004618:	4b8f      	ldr	r3, [pc, #572]	; (8004858 <UART_SetConfig+0x2c0>)
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	2b03      	cmp	r3, #3
 8004622:	d817      	bhi.n	8004654 <UART_SetConfig+0xbc>
 8004624:	a201      	add	r2, pc, #4	; (adr r2, 800462c <UART_SetConfig+0x94>)
 8004626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462a:	bf00      	nop
 800462c:	0800463d 	.word	0x0800463d
 8004630:	08004649 	.word	0x08004649
 8004634:	0800464f 	.word	0x0800464f
 8004638:	08004643 	.word	0x08004643
 800463c:	2300      	movs	r3, #0
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	e01e      	b.n	8004680 <UART_SetConfig+0xe8>
 8004642:	2302      	movs	r3, #2
 8004644:	77fb      	strb	r3, [r7, #31]
 8004646:	e01b      	b.n	8004680 <UART_SetConfig+0xe8>
 8004648:	2304      	movs	r3, #4
 800464a:	77fb      	strb	r3, [r7, #31]
 800464c:	e018      	b.n	8004680 <UART_SetConfig+0xe8>
 800464e:	2308      	movs	r3, #8
 8004650:	77fb      	strb	r3, [r7, #31]
 8004652:	e015      	b.n	8004680 <UART_SetConfig+0xe8>
 8004654:	2310      	movs	r3, #16
 8004656:	77fb      	strb	r3, [r7, #31]
 8004658:	bf00      	nop
 800465a:	e011      	b.n	8004680 <UART_SetConfig+0xe8>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a7e      	ldr	r2, [pc, #504]	; (800485c <UART_SetConfig+0x2c4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d102      	bne.n	800466c <UART_SetConfig+0xd4>
 8004666:	2300      	movs	r3, #0
 8004668:	77fb      	strb	r3, [r7, #31]
 800466a:	e009      	b.n	8004680 <UART_SetConfig+0xe8>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a7b      	ldr	r2, [pc, #492]	; (8004860 <UART_SetConfig+0x2c8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d102      	bne.n	800467c <UART_SetConfig+0xe4>
 8004676:	2300      	movs	r3, #0
 8004678:	77fb      	strb	r3, [r7, #31]
 800467a:	e001      	b.n	8004680 <UART_SetConfig+0xe8>
 800467c:	2310      	movs	r3, #16
 800467e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004688:	f040 8082 	bne.w	8004790 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800468c:	7ffb      	ldrb	r3, [r7, #31]
 800468e:	2b08      	cmp	r3, #8
 8004690:	d85e      	bhi.n	8004750 <UART_SetConfig+0x1b8>
 8004692:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <UART_SetConfig+0x100>)
 8004694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004698:	080046bd 	.word	0x080046bd
 800469c:	080046dd 	.word	0x080046dd
 80046a0:	080046fd 	.word	0x080046fd
 80046a4:	08004751 	.word	0x08004751
 80046a8:	08004719 	.word	0x08004719
 80046ac:	08004751 	.word	0x08004751
 80046b0:	08004751 	.word	0x08004751
 80046b4:	08004751 	.word	0x08004751
 80046b8:	08004739 	.word	0x08004739
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046bc:	f7fe fa7a 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 80046c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	005a      	lsls	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	085b      	lsrs	r3, r3, #1
 80046cc:	441a      	add	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	61bb      	str	r3, [r7, #24]
        break;
 80046da:	e03c      	b.n	8004756 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046dc:	f7fe fa8c 	bl	8002bf8 <HAL_RCC_GetPCLK2Freq>
 80046e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	005a      	lsls	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	085b      	lsrs	r3, r3, #1
 80046ec:	441a      	add	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	61bb      	str	r3, [r7, #24]
        break;
 80046fa:	e02c      	b.n	8004756 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004706:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6852      	ldr	r2, [r2, #4]
 800470e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004712:	b29b      	uxth	r3, r3
 8004714:	61bb      	str	r3, [r7, #24]
        break;
 8004716:	e01e      	b.n	8004756 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004718:	f7fe f9d6 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 800471c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	005a      	lsls	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	085b      	lsrs	r3, r3, #1
 8004728:	441a      	add	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004732:	b29b      	uxth	r3, r3
 8004734:	61bb      	str	r3, [r7, #24]
        break;
 8004736:	e00e      	b.n	8004756 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	fbb2 f3f3 	udiv	r3, r2, r3
 800474a:	b29b      	uxth	r3, r3
 800474c:	61bb      	str	r3, [r7, #24]
        break;
 800474e:	e002      	b.n	8004756 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	75fb      	strb	r3, [r7, #23]
        break;
 8004754:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b0f      	cmp	r3, #15
 800475a:	d916      	bls.n	800478a <UART_SetConfig+0x1f2>
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004762:	d212      	bcs.n	800478a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	b29b      	uxth	r3, r3
 8004768:	f023 030f 	bic.w	r3, r3, #15
 800476c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	085b      	lsrs	r3, r3, #1
 8004772:	b29b      	uxth	r3, r3
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	b29a      	uxth	r2, r3
 800477a:	897b      	ldrh	r3, [r7, #10]
 800477c:	4313      	orrs	r3, r2
 800477e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	897a      	ldrh	r2, [r7, #10]
 8004786:	60da      	str	r2, [r3, #12]
 8004788:	e07d      	b.n	8004886 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	75fb      	strb	r3, [r7, #23]
 800478e:	e07a      	b.n	8004886 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8004790:	7ffb      	ldrb	r3, [r7, #31]
 8004792:	2b08      	cmp	r3, #8
 8004794:	d866      	bhi.n	8004864 <UART_SetConfig+0x2cc>
 8004796:	a201      	add	r2, pc, #4	; (adr r2, 800479c <UART_SetConfig+0x204>)
 8004798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479c:	080047c1 	.word	0x080047c1
 80047a0:	080047df 	.word	0x080047df
 80047a4:	080047fd 	.word	0x080047fd
 80047a8:	08004865 	.word	0x08004865
 80047ac:	08004819 	.word	0x08004819
 80047b0:	08004865 	.word	0x08004865
 80047b4:	08004865 	.word	0x08004865
 80047b8:	08004865 	.word	0x08004865
 80047bc:	08004837 	.word	0x08004837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047c0:	f7fe f9f8 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 80047c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	085a      	lsrs	r2, r3, #1
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	441a      	add	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	b29b      	uxth	r3, r3
 80047da:	61bb      	str	r3, [r7, #24]
        break;
 80047dc:	e045      	b.n	800486a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047de:	f7fe fa0b 	bl	8002bf8 <HAL_RCC_GetPCLK2Freq>
 80047e2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	085a      	lsrs	r2, r3, #1
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	441a      	add	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	61bb      	str	r3, [r7, #24]
        break;
 80047fa:	e036      	b.n	800486a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	085b      	lsrs	r3, r3, #1
 8004802:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004806:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6852      	ldr	r2, [r2, #4]
 800480e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004812:	b29b      	uxth	r3, r3
 8004814:	61bb      	str	r3, [r7, #24]
        break;
 8004816:	e028      	b.n	800486a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004818:	f7fe f956 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 800481c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	085a      	lsrs	r2, r3, #1
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	441a      	add	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	b29b      	uxth	r3, r3
 8004832:	61bb      	str	r3, [r7, #24]
        break;
 8004834:	e019      	b.n	800486a <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	085b      	lsrs	r3, r3, #1
 800483c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	fbb2 f3f3 	udiv	r3, r2, r3
 8004848:	b29b      	uxth	r3, r3
 800484a:	61bb      	str	r3, [r7, #24]
        break;
 800484c:	e00d      	b.n	800486a <UART_SetConfig+0x2d2>
 800484e:	bf00      	nop
 8004850:	efff69f3 	.word	0xefff69f3
 8004854:	40013800 	.word	0x40013800
 8004858:	40021000 	.word	0x40021000
 800485c:	40004400 	.word	0x40004400
 8004860:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	75fb      	strb	r3, [r7, #23]
        break;
 8004868:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	2b0f      	cmp	r3, #15
 800486e:	d908      	bls.n	8004882 <UART_SetConfig+0x2ea>
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004876:	d204      	bcs.n	8004882 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	60da      	str	r2, [r3, #12]
 8004880:	e001      	b.n	8004886 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004892:	7dfb      	ldrb	r3, [r7, #23]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3720      	adds	r7, #32
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01a      	beq.n	80049b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800499a:	d10a      	bne.n	80049b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	605a      	str	r2, [r3, #4]
  }
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80049ee:	f7fc fd57 	bl	80014a0 <HAL_GetTick>
 80049f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d10e      	bne.n	8004a20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f82a 	bl	8004a6a <UART_WaitOnFlagUntilTimeout>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e020      	b.n	8004a62 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0304 	and.w	r3, r3, #4
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d10e      	bne.n	8004a4c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f814 	bl	8004a6a <UART_WaitOnFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e00a      	b.n	8004a62 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	603b      	str	r3, [r7, #0]
 8004a76:	4613      	mov	r3, r2
 8004a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a7a:	e05d      	b.n	8004b38 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a82:	d059      	beq.n	8004b38 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a84:	f7fc fd0c 	bl	80014a0 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d302      	bcc.n	8004a9a <UART_WaitOnFlagUntilTimeout+0x30>
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d11b      	bne.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004aa8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2220      	movs	r2, #32
 8004abe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e042      	b.n	8004b58 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d02b      	beq.n	8004b38 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aee:	d123      	bne.n	8004b38 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004af8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b08:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0201 	bic.w	r2, r2, #1
 8004b18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2220      	movs	r2, #32
 8004b24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e00f      	b.n	8004b58 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	69da      	ldr	r2, [r3, #28]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4013      	ands	r3, r2
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	bf0c      	ite	eq
 8004b48:	2301      	moveq	r3, #1
 8004b4a:	2300      	movne	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	461a      	mov	r2, r3
 8004b50:	79fb      	ldrb	r3, [r7, #7]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d092      	beq.n	8004a7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <__errno>:
 8004b60:	4b01      	ldr	r3, [pc, #4]	; (8004b68 <__errno+0x8>)
 8004b62:	6818      	ldr	r0, [r3, #0]
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	2000000c 	.word	0x2000000c

08004b6c <__libc_init_array>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	4e0d      	ldr	r6, [pc, #52]	; (8004ba4 <__libc_init_array+0x38>)
 8004b70:	4c0d      	ldr	r4, [pc, #52]	; (8004ba8 <__libc_init_array+0x3c>)
 8004b72:	1ba4      	subs	r4, r4, r6
 8004b74:	10a4      	asrs	r4, r4, #2
 8004b76:	2500      	movs	r5, #0
 8004b78:	42a5      	cmp	r5, r4
 8004b7a:	d109      	bne.n	8004b90 <__libc_init_array+0x24>
 8004b7c:	4e0b      	ldr	r6, [pc, #44]	; (8004bac <__libc_init_array+0x40>)
 8004b7e:	4c0c      	ldr	r4, [pc, #48]	; (8004bb0 <__libc_init_array+0x44>)
 8004b80:	f000 ff04 	bl	800598c <_init>
 8004b84:	1ba4      	subs	r4, r4, r6
 8004b86:	10a4      	asrs	r4, r4, #2
 8004b88:	2500      	movs	r5, #0
 8004b8a:	42a5      	cmp	r5, r4
 8004b8c:	d105      	bne.n	8004b9a <__libc_init_array+0x2e>
 8004b8e:	bd70      	pop	{r4, r5, r6, pc}
 8004b90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b94:	4798      	blx	r3
 8004b96:	3501      	adds	r5, #1
 8004b98:	e7ee      	b.n	8004b78 <__libc_init_array+0xc>
 8004b9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b9e:	4798      	blx	r3
 8004ba0:	3501      	adds	r5, #1
 8004ba2:	e7f2      	b.n	8004b8a <__libc_init_array+0x1e>
 8004ba4:	08005aa8 	.word	0x08005aa8
 8004ba8:	08005aa8 	.word	0x08005aa8
 8004bac:	08005aa8 	.word	0x08005aa8
 8004bb0:	08005aac 	.word	0x08005aac

08004bb4 <memset>:
 8004bb4:	4402      	add	r2, r0
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d100      	bne.n	8004bbe <memset+0xa>
 8004bbc:	4770      	bx	lr
 8004bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc2:	e7f9      	b.n	8004bb8 <memset+0x4>

08004bc4 <iprintf>:
 8004bc4:	b40f      	push	{r0, r1, r2, r3}
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <iprintf+0x2c>)
 8004bc8:	b513      	push	{r0, r1, r4, lr}
 8004bca:	681c      	ldr	r4, [r3, #0]
 8004bcc:	b124      	cbz	r4, 8004bd8 <iprintf+0x14>
 8004bce:	69a3      	ldr	r3, [r4, #24]
 8004bd0:	b913      	cbnz	r3, 8004bd8 <iprintf+0x14>
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f000 f84e 	bl	8004c74 <__sinit>
 8004bd8:	ab05      	add	r3, sp, #20
 8004bda:	9a04      	ldr	r2, [sp, #16]
 8004bdc:	68a1      	ldr	r1, [r4, #8]
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	4620      	mov	r0, r4
 8004be2:	f000 f955 	bl	8004e90 <_vfiprintf_r>
 8004be6:	b002      	add	sp, #8
 8004be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bec:	b004      	add	sp, #16
 8004bee:	4770      	bx	lr
 8004bf0:	2000000c 	.word	0x2000000c

08004bf4 <std>:
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	b510      	push	{r4, lr}
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8004bfe:	6083      	str	r3, [r0, #8]
 8004c00:	8181      	strh	r1, [r0, #12]
 8004c02:	6643      	str	r3, [r0, #100]	; 0x64
 8004c04:	81c2      	strh	r2, [r0, #14]
 8004c06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c0a:	6183      	str	r3, [r0, #24]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	2208      	movs	r2, #8
 8004c10:	305c      	adds	r0, #92	; 0x5c
 8004c12:	f7ff ffcf 	bl	8004bb4 <memset>
 8004c16:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <std+0x38>)
 8004c18:	6263      	str	r3, [r4, #36]	; 0x24
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <std+0x3c>)
 8004c1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c1e:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <std+0x40>)
 8004c20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c22:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <std+0x44>)
 8004c24:	6224      	str	r4, [r4, #32]
 8004c26:	6323      	str	r3, [r4, #48]	; 0x30
 8004c28:	bd10      	pop	{r4, pc}
 8004c2a:	bf00      	nop
 8004c2c:	080053ed 	.word	0x080053ed
 8004c30:	0800540f 	.word	0x0800540f
 8004c34:	08005447 	.word	0x08005447
 8004c38:	0800546b 	.word	0x0800546b

08004c3c <_cleanup_r>:
 8004c3c:	4901      	ldr	r1, [pc, #4]	; (8004c44 <_cleanup_r+0x8>)
 8004c3e:	f000 b885 	b.w	8004d4c <_fwalk_reent>
 8004c42:	bf00      	nop
 8004c44:	08005745 	.word	0x08005745

08004c48 <__sfmoreglue>:
 8004c48:	b570      	push	{r4, r5, r6, lr}
 8004c4a:	1e4a      	subs	r2, r1, #1
 8004c4c:	2568      	movs	r5, #104	; 0x68
 8004c4e:	4355      	muls	r5, r2
 8004c50:	460e      	mov	r6, r1
 8004c52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c56:	f000 f897 	bl	8004d88 <_malloc_r>
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	b140      	cbz	r0, 8004c70 <__sfmoreglue+0x28>
 8004c5e:	2100      	movs	r1, #0
 8004c60:	e9c0 1600 	strd	r1, r6, [r0]
 8004c64:	300c      	adds	r0, #12
 8004c66:	60a0      	str	r0, [r4, #8]
 8004c68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c6c:	f7ff ffa2 	bl	8004bb4 <memset>
 8004c70:	4620      	mov	r0, r4
 8004c72:	bd70      	pop	{r4, r5, r6, pc}

08004c74 <__sinit>:
 8004c74:	6983      	ldr	r3, [r0, #24]
 8004c76:	b510      	push	{r4, lr}
 8004c78:	4604      	mov	r4, r0
 8004c7a:	bb33      	cbnz	r3, 8004cca <__sinit+0x56>
 8004c7c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004c80:	6503      	str	r3, [r0, #80]	; 0x50
 8004c82:	4b12      	ldr	r3, [pc, #72]	; (8004ccc <__sinit+0x58>)
 8004c84:	4a12      	ldr	r2, [pc, #72]	; (8004cd0 <__sinit+0x5c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6282      	str	r2, [r0, #40]	; 0x28
 8004c8a:	4298      	cmp	r0, r3
 8004c8c:	bf04      	itt	eq
 8004c8e:	2301      	moveq	r3, #1
 8004c90:	6183      	streq	r3, [r0, #24]
 8004c92:	f000 f81f 	bl	8004cd4 <__sfp>
 8004c96:	6060      	str	r0, [r4, #4]
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f000 f81b 	bl	8004cd4 <__sfp>
 8004c9e:	60a0      	str	r0, [r4, #8]
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f000 f817 	bl	8004cd4 <__sfp>
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	60e0      	str	r0, [r4, #12]
 8004caa:	2104      	movs	r1, #4
 8004cac:	6860      	ldr	r0, [r4, #4]
 8004cae:	f7ff ffa1 	bl	8004bf4 <std>
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	2109      	movs	r1, #9
 8004cb6:	68a0      	ldr	r0, [r4, #8]
 8004cb8:	f7ff ff9c 	bl	8004bf4 <std>
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	2112      	movs	r1, #18
 8004cc0:	68e0      	ldr	r0, [r4, #12]
 8004cc2:	f7ff ff97 	bl	8004bf4 <std>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	61a3      	str	r3, [r4, #24]
 8004cca:	bd10      	pop	{r4, pc}
 8004ccc:	08005a10 	.word	0x08005a10
 8004cd0:	08004c3d 	.word	0x08004c3d

08004cd4 <__sfp>:
 8004cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd6:	4b1b      	ldr	r3, [pc, #108]	; (8004d44 <__sfp+0x70>)
 8004cd8:	681e      	ldr	r6, [r3, #0]
 8004cda:	69b3      	ldr	r3, [r6, #24]
 8004cdc:	4607      	mov	r7, r0
 8004cde:	b913      	cbnz	r3, 8004ce6 <__sfp+0x12>
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	f7ff ffc7 	bl	8004c74 <__sinit>
 8004ce6:	3648      	adds	r6, #72	; 0x48
 8004ce8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	d503      	bpl.n	8004cf8 <__sfp+0x24>
 8004cf0:	6833      	ldr	r3, [r6, #0]
 8004cf2:	b133      	cbz	r3, 8004d02 <__sfp+0x2e>
 8004cf4:	6836      	ldr	r6, [r6, #0]
 8004cf6:	e7f7      	b.n	8004ce8 <__sfp+0x14>
 8004cf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004cfc:	b16d      	cbz	r5, 8004d1a <__sfp+0x46>
 8004cfe:	3468      	adds	r4, #104	; 0x68
 8004d00:	e7f4      	b.n	8004cec <__sfp+0x18>
 8004d02:	2104      	movs	r1, #4
 8004d04:	4638      	mov	r0, r7
 8004d06:	f7ff ff9f 	bl	8004c48 <__sfmoreglue>
 8004d0a:	6030      	str	r0, [r6, #0]
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	d1f1      	bne.n	8004cf4 <__sfp+0x20>
 8004d10:	230c      	movs	r3, #12
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	4604      	mov	r4, r0
 8004d16:	4620      	mov	r0, r4
 8004d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d1a:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <__sfp+0x74>)
 8004d1c:	6665      	str	r5, [r4, #100]	; 0x64
 8004d1e:	e9c4 5500 	strd	r5, r5, [r4]
 8004d22:	60a5      	str	r5, [r4, #8]
 8004d24:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004d28:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004d2c:	2208      	movs	r2, #8
 8004d2e:	4629      	mov	r1, r5
 8004d30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d34:	f7ff ff3e 	bl	8004bb4 <memset>
 8004d38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d40:	e7e9      	b.n	8004d16 <__sfp+0x42>
 8004d42:	bf00      	nop
 8004d44:	08005a10 	.word	0x08005a10
 8004d48:	ffff0001 	.word	0xffff0001

08004d4c <_fwalk_reent>:
 8004d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d50:	4680      	mov	r8, r0
 8004d52:	4689      	mov	r9, r1
 8004d54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d58:	2600      	movs	r6, #0
 8004d5a:	b914      	cbnz	r4, 8004d62 <_fwalk_reent+0x16>
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d62:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004d66:	3f01      	subs	r7, #1
 8004d68:	d501      	bpl.n	8004d6e <_fwalk_reent+0x22>
 8004d6a:	6824      	ldr	r4, [r4, #0]
 8004d6c:	e7f5      	b.n	8004d5a <_fwalk_reent+0xe>
 8004d6e:	89ab      	ldrh	r3, [r5, #12]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d907      	bls.n	8004d84 <_fwalk_reent+0x38>
 8004d74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	d003      	beq.n	8004d84 <_fwalk_reent+0x38>
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	4640      	mov	r0, r8
 8004d80:	47c8      	blx	r9
 8004d82:	4306      	orrs	r6, r0
 8004d84:	3568      	adds	r5, #104	; 0x68
 8004d86:	e7ee      	b.n	8004d66 <_fwalk_reent+0x1a>

08004d88 <_malloc_r>:
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	1ccd      	adds	r5, r1, #3
 8004d8c:	f025 0503 	bic.w	r5, r5, #3
 8004d90:	3508      	adds	r5, #8
 8004d92:	2d0c      	cmp	r5, #12
 8004d94:	bf38      	it	cc
 8004d96:	250c      	movcc	r5, #12
 8004d98:	2d00      	cmp	r5, #0
 8004d9a:	4606      	mov	r6, r0
 8004d9c:	db01      	blt.n	8004da2 <_malloc_r+0x1a>
 8004d9e:	42a9      	cmp	r1, r5
 8004da0:	d903      	bls.n	8004daa <_malloc_r+0x22>
 8004da2:	230c      	movs	r3, #12
 8004da4:	6033      	str	r3, [r6, #0]
 8004da6:	2000      	movs	r0, #0
 8004da8:	bd70      	pop	{r4, r5, r6, pc}
 8004daa:	f000 fd6b 	bl	8005884 <__malloc_lock>
 8004dae:	4a21      	ldr	r2, [pc, #132]	; (8004e34 <_malloc_r+0xac>)
 8004db0:	6814      	ldr	r4, [r2, #0]
 8004db2:	4621      	mov	r1, r4
 8004db4:	b991      	cbnz	r1, 8004ddc <_malloc_r+0x54>
 8004db6:	4c20      	ldr	r4, [pc, #128]	; (8004e38 <_malloc_r+0xb0>)
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	b91b      	cbnz	r3, 8004dc4 <_malloc_r+0x3c>
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	f000 fb05 	bl	80053cc <_sbrk_r>
 8004dc2:	6020      	str	r0, [r4, #0]
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	f000 fb00 	bl	80053cc <_sbrk_r>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	d124      	bne.n	8004e1a <_malloc_r+0x92>
 8004dd0:	230c      	movs	r3, #12
 8004dd2:	6033      	str	r3, [r6, #0]
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	f000 fd56 	bl	8005886 <__malloc_unlock>
 8004dda:	e7e4      	b.n	8004da6 <_malloc_r+0x1e>
 8004ddc:	680b      	ldr	r3, [r1, #0]
 8004dde:	1b5b      	subs	r3, r3, r5
 8004de0:	d418      	bmi.n	8004e14 <_malloc_r+0x8c>
 8004de2:	2b0b      	cmp	r3, #11
 8004de4:	d90f      	bls.n	8004e06 <_malloc_r+0x7e>
 8004de6:	600b      	str	r3, [r1, #0]
 8004de8:	50cd      	str	r5, [r1, r3]
 8004dea:	18cc      	adds	r4, r1, r3
 8004dec:	4630      	mov	r0, r6
 8004dee:	f000 fd4a 	bl	8005886 <__malloc_unlock>
 8004df2:	f104 000b 	add.w	r0, r4, #11
 8004df6:	1d23      	adds	r3, r4, #4
 8004df8:	f020 0007 	bic.w	r0, r0, #7
 8004dfc:	1ac3      	subs	r3, r0, r3
 8004dfe:	d0d3      	beq.n	8004da8 <_malloc_r+0x20>
 8004e00:	425a      	negs	r2, r3
 8004e02:	50e2      	str	r2, [r4, r3]
 8004e04:	e7d0      	b.n	8004da8 <_malloc_r+0x20>
 8004e06:	428c      	cmp	r4, r1
 8004e08:	684b      	ldr	r3, [r1, #4]
 8004e0a:	bf16      	itet	ne
 8004e0c:	6063      	strne	r3, [r4, #4]
 8004e0e:	6013      	streq	r3, [r2, #0]
 8004e10:	460c      	movne	r4, r1
 8004e12:	e7eb      	b.n	8004dec <_malloc_r+0x64>
 8004e14:	460c      	mov	r4, r1
 8004e16:	6849      	ldr	r1, [r1, #4]
 8004e18:	e7cc      	b.n	8004db4 <_malloc_r+0x2c>
 8004e1a:	1cc4      	adds	r4, r0, #3
 8004e1c:	f024 0403 	bic.w	r4, r4, #3
 8004e20:	42a0      	cmp	r0, r4
 8004e22:	d005      	beq.n	8004e30 <_malloc_r+0xa8>
 8004e24:	1a21      	subs	r1, r4, r0
 8004e26:	4630      	mov	r0, r6
 8004e28:	f000 fad0 	bl	80053cc <_sbrk_r>
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	d0cf      	beq.n	8004dd0 <_malloc_r+0x48>
 8004e30:	6025      	str	r5, [r4, #0]
 8004e32:	e7db      	b.n	8004dec <_malloc_r+0x64>
 8004e34:	20000098 	.word	0x20000098
 8004e38:	2000009c 	.word	0x2000009c

08004e3c <__sfputc_r>:
 8004e3c:	6893      	ldr	r3, [r2, #8]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	b410      	push	{r4}
 8004e44:	6093      	str	r3, [r2, #8]
 8004e46:	da08      	bge.n	8004e5a <__sfputc_r+0x1e>
 8004e48:	6994      	ldr	r4, [r2, #24]
 8004e4a:	42a3      	cmp	r3, r4
 8004e4c:	db01      	blt.n	8004e52 <__sfputc_r+0x16>
 8004e4e:	290a      	cmp	r1, #10
 8004e50:	d103      	bne.n	8004e5a <__sfputc_r+0x1e>
 8004e52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e56:	f000 bb0d 	b.w	8005474 <__swbuf_r>
 8004e5a:	6813      	ldr	r3, [r2, #0]
 8004e5c:	1c58      	adds	r0, r3, #1
 8004e5e:	6010      	str	r0, [r2, #0]
 8004e60:	7019      	strb	r1, [r3, #0]
 8004e62:	4608      	mov	r0, r1
 8004e64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <__sfputs_r>:
 8004e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6c:	4606      	mov	r6, r0
 8004e6e:	460f      	mov	r7, r1
 8004e70:	4614      	mov	r4, r2
 8004e72:	18d5      	adds	r5, r2, r3
 8004e74:	42ac      	cmp	r4, r5
 8004e76:	d101      	bne.n	8004e7c <__sfputs_r+0x12>
 8004e78:	2000      	movs	r0, #0
 8004e7a:	e007      	b.n	8004e8c <__sfputs_r+0x22>
 8004e7c:	463a      	mov	r2, r7
 8004e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e82:	4630      	mov	r0, r6
 8004e84:	f7ff ffda 	bl	8004e3c <__sfputc_r>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d1f3      	bne.n	8004e74 <__sfputs_r+0xa>
 8004e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e90 <_vfiprintf_r>:
 8004e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e94:	460c      	mov	r4, r1
 8004e96:	b09d      	sub	sp, #116	; 0x74
 8004e98:	4617      	mov	r7, r2
 8004e9a:	461d      	mov	r5, r3
 8004e9c:	4606      	mov	r6, r0
 8004e9e:	b118      	cbz	r0, 8004ea8 <_vfiprintf_r+0x18>
 8004ea0:	6983      	ldr	r3, [r0, #24]
 8004ea2:	b90b      	cbnz	r3, 8004ea8 <_vfiprintf_r+0x18>
 8004ea4:	f7ff fee6 	bl	8004c74 <__sinit>
 8004ea8:	4b7c      	ldr	r3, [pc, #496]	; (800509c <_vfiprintf_r+0x20c>)
 8004eaa:	429c      	cmp	r4, r3
 8004eac:	d158      	bne.n	8004f60 <_vfiprintf_r+0xd0>
 8004eae:	6874      	ldr	r4, [r6, #4]
 8004eb0:	89a3      	ldrh	r3, [r4, #12]
 8004eb2:	0718      	lsls	r0, r3, #28
 8004eb4:	d55e      	bpl.n	8004f74 <_vfiprintf_r+0xe4>
 8004eb6:	6923      	ldr	r3, [r4, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d05b      	beq.n	8004f74 <_vfiprintf_r+0xe4>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8004ec0:	2320      	movs	r3, #32
 8004ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ec6:	2330      	movs	r3, #48	; 0x30
 8004ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ecc:	9503      	str	r5, [sp, #12]
 8004ece:	f04f 0b01 	mov.w	fp, #1
 8004ed2:	46b8      	mov	r8, r7
 8004ed4:	4645      	mov	r5, r8
 8004ed6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004eda:	b10b      	cbz	r3, 8004ee0 <_vfiprintf_r+0x50>
 8004edc:	2b25      	cmp	r3, #37	; 0x25
 8004ede:	d154      	bne.n	8004f8a <_vfiprintf_r+0xfa>
 8004ee0:	ebb8 0a07 	subs.w	sl, r8, r7
 8004ee4:	d00b      	beq.n	8004efe <_vfiprintf_r+0x6e>
 8004ee6:	4653      	mov	r3, sl
 8004ee8:	463a      	mov	r2, r7
 8004eea:	4621      	mov	r1, r4
 8004eec:	4630      	mov	r0, r6
 8004eee:	f7ff ffbc 	bl	8004e6a <__sfputs_r>
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	f000 80c2 	beq.w	800507c <_vfiprintf_r+0x1ec>
 8004ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004efa:	4453      	add	r3, sl
 8004efc:	9309      	str	r3, [sp, #36]	; 0x24
 8004efe:	f898 3000 	ldrb.w	r3, [r8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 80ba 	beq.w	800507c <_vfiprintf_r+0x1ec>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f12:	9304      	str	r3, [sp, #16]
 8004f14:	9307      	str	r3, [sp, #28]
 8004f16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f1a:	931a      	str	r3, [sp, #104]	; 0x68
 8004f1c:	46a8      	mov	r8, r5
 8004f1e:	2205      	movs	r2, #5
 8004f20:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004f24:	485e      	ldr	r0, [pc, #376]	; (80050a0 <_vfiprintf_r+0x210>)
 8004f26:	f7fb f953 	bl	80001d0 <memchr>
 8004f2a:	9b04      	ldr	r3, [sp, #16]
 8004f2c:	bb78      	cbnz	r0, 8004f8e <_vfiprintf_r+0xfe>
 8004f2e:	06d9      	lsls	r1, r3, #27
 8004f30:	bf44      	itt	mi
 8004f32:	2220      	movmi	r2, #32
 8004f34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f38:	071a      	lsls	r2, r3, #28
 8004f3a:	bf44      	itt	mi
 8004f3c:	222b      	movmi	r2, #43	; 0x2b
 8004f3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f42:	782a      	ldrb	r2, [r5, #0]
 8004f44:	2a2a      	cmp	r2, #42	; 0x2a
 8004f46:	d02a      	beq.n	8004f9e <_vfiprintf_r+0x10e>
 8004f48:	9a07      	ldr	r2, [sp, #28]
 8004f4a:	46a8      	mov	r8, r5
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	250a      	movs	r5, #10
 8004f50:	4641      	mov	r1, r8
 8004f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f56:	3b30      	subs	r3, #48	; 0x30
 8004f58:	2b09      	cmp	r3, #9
 8004f5a:	d969      	bls.n	8005030 <_vfiprintf_r+0x1a0>
 8004f5c:	b360      	cbz	r0, 8004fb8 <_vfiprintf_r+0x128>
 8004f5e:	e024      	b.n	8004faa <_vfiprintf_r+0x11a>
 8004f60:	4b50      	ldr	r3, [pc, #320]	; (80050a4 <_vfiprintf_r+0x214>)
 8004f62:	429c      	cmp	r4, r3
 8004f64:	d101      	bne.n	8004f6a <_vfiprintf_r+0xda>
 8004f66:	68b4      	ldr	r4, [r6, #8]
 8004f68:	e7a2      	b.n	8004eb0 <_vfiprintf_r+0x20>
 8004f6a:	4b4f      	ldr	r3, [pc, #316]	; (80050a8 <_vfiprintf_r+0x218>)
 8004f6c:	429c      	cmp	r4, r3
 8004f6e:	bf08      	it	eq
 8004f70:	68f4      	ldreq	r4, [r6, #12]
 8004f72:	e79d      	b.n	8004eb0 <_vfiprintf_r+0x20>
 8004f74:	4621      	mov	r1, r4
 8004f76:	4630      	mov	r0, r6
 8004f78:	f000 fae0 	bl	800553c <__swsetup_r>
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	d09d      	beq.n	8004ebc <_vfiprintf_r+0x2c>
 8004f80:	f04f 30ff 	mov.w	r0, #4294967295
 8004f84:	b01d      	add	sp, #116	; 0x74
 8004f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f8a:	46a8      	mov	r8, r5
 8004f8c:	e7a2      	b.n	8004ed4 <_vfiprintf_r+0x44>
 8004f8e:	4a44      	ldr	r2, [pc, #272]	; (80050a0 <_vfiprintf_r+0x210>)
 8004f90:	1a80      	subs	r0, r0, r2
 8004f92:	fa0b f000 	lsl.w	r0, fp, r0
 8004f96:	4318      	orrs	r0, r3
 8004f98:	9004      	str	r0, [sp, #16]
 8004f9a:	4645      	mov	r5, r8
 8004f9c:	e7be      	b.n	8004f1c <_vfiprintf_r+0x8c>
 8004f9e:	9a03      	ldr	r2, [sp, #12]
 8004fa0:	1d11      	adds	r1, r2, #4
 8004fa2:	6812      	ldr	r2, [r2, #0]
 8004fa4:	9103      	str	r1, [sp, #12]
 8004fa6:	2a00      	cmp	r2, #0
 8004fa8:	db01      	blt.n	8004fae <_vfiprintf_r+0x11e>
 8004faa:	9207      	str	r2, [sp, #28]
 8004fac:	e004      	b.n	8004fb8 <_vfiprintf_r+0x128>
 8004fae:	4252      	negs	r2, r2
 8004fb0:	f043 0302 	orr.w	r3, r3, #2
 8004fb4:	9207      	str	r2, [sp, #28]
 8004fb6:	9304      	str	r3, [sp, #16]
 8004fb8:	f898 3000 	ldrb.w	r3, [r8]
 8004fbc:	2b2e      	cmp	r3, #46	; 0x2e
 8004fbe:	d10e      	bne.n	8004fde <_vfiprintf_r+0x14e>
 8004fc0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8004fc6:	d138      	bne.n	800503a <_vfiprintf_r+0x1aa>
 8004fc8:	9b03      	ldr	r3, [sp, #12]
 8004fca:	1d1a      	adds	r2, r3, #4
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	9203      	str	r2, [sp, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	bfb8      	it	lt
 8004fd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fd8:	f108 0802 	add.w	r8, r8, #2
 8004fdc:	9305      	str	r3, [sp, #20]
 8004fde:	4d33      	ldr	r5, [pc, #204]	; (80050ac <_vfiprintf_r+0x21c>)
 8004fe0:	f898 1000 	ldrb.w	r1, [r8]
 8004fe4:	2203      	movs	r2, #3
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f7fb f8f2 	bl	80001d0 <memchr>
 8004fec:	b140      	cbz	r0, 8005000 <_vfiprintf_r+0x170>
 8004fee:	2340      	movs	r3, #64	; 0x40
 8004ff0:	1b40      	subs	r0, r0, r5
 8004ff2:	fa03 f000 	lsl.w	r0, r3, r0
 8004ff6:	9b04      	ldr	r3, [sp, #16]
 8004ff8:	4303      	orrs	r3, r0
 8004ffa:	f108 0801 	add.w	r8, r8, #1
 8004ffe:	9304      	str	r3, [sp, #16]
 8005000:	f898 1000 	ldrb.w	r1, [r8]
 8005004:	482a      	ldr	r0, [pc, #168]	; (80050b0 <_vfiprintf_r+0x220>)
 8005006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800500a:	2206      	movs	r2, #6
 800500c:	f108 0701 	add.w	r7, r8, #1
 8005010:	f7fb f8de 	bl	80001d0 <memchr>
 8005014:	2800      	cmp	r0, #0
 8005016:	d037      	beq.n	8005088 <_vfiprintf_r+0x1f8>
 8005018:	4b26      	ldr	r3, [pc, #152]	; (80050b4 <_vfiprintf_r+0x224>)
 800501a:	bb1b      	cbnz	r3, 8005064 <_vfiprintf_r+0x1d4>
 800501c:	9b03      	ldr	r3, [sp, #12]
 800501e:	3307      	adds	r3, #7
 8005020:	f023 0307 	bic.w	r3, r3, #7
 8005024:	3308      	adds	r3, #8
 8005026:	9303      	str	r3, [sp, #12]
 8005028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800502a:	444b      	add	r3, r9
 800502c:	9309      	str	r3, [sp, #36]	; 0x24
 800502e:	e750      	b.n	8004ed2 <_vfiprintf_r+0x42>
 8005030:	fb05 3202 	mla	r2, r5, r2, r3
 8005034:	2001      	movs	r0, #1
 8005036:	4688      	mov	r8, r1
 8005038:	e78a      	b.n	8004f50 <_vfiprintf_r+0xc0>
 800503a:	2300      	movs	r3, #0
 800503c:	f108 0801 	add.w	r8, r8, #1
 8005040:	9305      	str	r3, [sp, #20]
 8005042:	4619      	mov	r1, r3
 8005044:	250a      	movs	r5, #10
 8005046:	4640      	mov	r0, r8
 8005048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800504c:	3a30      	subs	r2, #48	; 0x30
 800504e:	2a09      	cmp	r2, #9
 8005050:	d903      	bls.n	800505a <_vfiprintf_r+0x1ca>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0c3      	beq.n	8004fde <_vfiprintf_r+0x14e>
 8005056:	9105      	str	r1, [sp, #20]
 8005058:	e7c1      	b.n	8004fde <_vfiprintf_r+0x14e>
 800505a:	fb05 2101 	mla	r1, r5, r1, r2
 800505e:	2301      	movs	r3, #1
 8005060:	4680      	mov	r8, r0
 8005062:	e7f0      	b.n	8005046 <_vfiprintf_r+0x1b6>
 8005064:	ab03      	add	r3, sp, #12
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	4622      	mov	r2, r4
 800506a:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <_vfiprintf_r+0x228>)
 800506c:	a904      	add	r1, sp, #16
 800506e:	4630      	mov	r0, r6
 8005070:	f3af 8000 	nop.w
 8005074:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005078:	4681      	mov	r9, r0
 800507a:	d1d5      	bne.n	8005028 <_vfiprintf_r+0x198>
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	065b      	lsls	r3, r3, #25
 8005080:	f53f af7e 	bmi.w	8004f80 <_vfiprintf_r+0xf0>
 8005084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005086:	e77d      	b.n	8004f84 <_vfiprintf_r+0xf4>
 8005088:	ab03      	add	r3, sp, #12
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	4622      	mov	r2, r4
 800508e:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <_vfiprintf_r+0x228>)
 8005090:	a904      	add	r1, sp, #16
 8005092:	4630      	mov	r0, r6
 8005094:	f000 f888 	bl	80051a8 <_printf_i>
 8005098:	e7ec      	b.n	8005074 <_vfiprintf_r+0x1e4>
 800509a:	bf00      	nop
 800509c:	08005a34 	.word	0x08005a34
 80050a0:	08005a74 	.word	0x08005a74
 80050a4:	08005a54 	.word	0x08005a54
 80050a8:	08005a14 	.word	0x08005a14
 80050ac:	08005a7a 	.word	0x08005a7a
 80050b0:	08005a7e 	.word	0x08005a7e
 80050b4:	00000000 	.word	0x00000000
 80050b8:	08004e6b 	.word	0x08004e6b

080050bc <_printf_common>:
 80050bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c0:	4691      	mov	r9, r2
 80050c2:	461f      	mov	r7, r3
 80050c4:	688a      	ldr	r2, [r1, #8]
 80050c6:	690b      	ldr	r3, [r1, #16]
 80050c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050cc:	4293      	cmp	r3, r2
 80050ce:	bfb8      	it	lt
 80050d0:	4613      	movlt	r3, r2
 80050d2:	f8c9 3000 	str.w	r3, [r9]
 80050d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050da:	4606      	mov	r6, r0
 80050dc:	460c      	mov	r4, r1
 80050de:	b112      	cbz	r2, 80050e6 <_printf_common+0x2a>
 80050e0:	3301      	adds	r3, #1
 80050e2:	f8c9 3000 	str.w	r3, [r9]
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	0699      	lsls	r1, r3, #26
 80050ea:	bf42      	ittt	mi
 80050ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80050f0:	3302      	addmi	r3, #2
 80050f2:	f8c9 3000 	strmi.w	r3, [r9]
 80050f6:	6825      	ldr	r5, [r4, #0]
 80050f8:	f015 0506 	ands.w	r5, r5, #6
 80050fc:	d107      	bne.n	800510e <_printf_common+0x52>
 80050fe:	f104 0a19 	add.w	sl, r4, #25
 8005102:	68e3      	ldr	r3, [r4, #12]
 8005104:	f8d9 2000 	ldr.w	r2, [r9]
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	42ab      	cmp	r3, r5
 800510c:	dc28      	bgt.n	8005160 <_printf_common+0xa4>
 800510e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005112:	6822      	ldr	r2, [r4, #0]
 8005114:	3300      	adds	r3, #0
 8005116:	bf18      	it	ne
 8005118:	2301      	movne	r3, #1
 800511a:	0692      	lsls	r2, r2, #26
 800511c:	d42d      	bmi.n	800517a <_printf_common+0xbe>
 800511e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005122:	4639      	mov	r1, r7
 8005124:	4630      	mov	r0, r6
 8005126:	47c0      	blx	r8
 8005128:	3001      	adds	r0, #1
 800512a:	d020      	beq.n	800516e <_printf_common+0xb2>
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	68e5      	ldr	r5, [r4, #12]
 8005130:	f8d9 2000 	ldr.w	r2, [r9]
 8005134:	f003 0306 	and.w	r3, r3, #6
 8005138:	2b04      	cmp	r3, #4
 800513a:	bf08      	it	eq
 800513c:	1aad      	subeq	r5, r5, r2
 800513e:	68a3      	ldr	r3, [r4, #8]
 8005140:	6922      	ldr	r2, [r4, #16]
 8005142:	bf0c      	ite	eq
 8005144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005148:	2500      	movne	r5, #0
 800514a:	4293      	cmp	r3, r2
 800514c:	bfc4      	itt	gt
 800514e:	1a9b      	subgt	r3, r3, r2
 8005150:	18ed      	addgt	r5, r5, r3
 8005152:	f04f 0900 	mov.w	r9, #0
 8005156:	341a      	adds	r4, #26
 8005158:	454d      	cmp	r5, r9
 800515a:	d11a      	bne.n	8005192 <_printf_common+0xd6>
 800515c:	2000      	movs	r0, #0
 800515e:	e008      	b.n	8005172 <_printf_common+0xb6>
 8005160:	2301      	movs	r3, #1
 8005162:	4652      	mov	r2, sl
 8005164:	4639      	mov	r1, r7
 8005166:	4630      	mov	r0, r6
 8005168:	47c0      	blx	r8
 800516a:	3001      	adds	r0, #1
 800516c:	d103      	bne.n	8005176 <_printf_common+0xba>
 800516e:	f04f 30ff 	mov.w	r0, #4294967295
 8005172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005176:	3501      	adds	r5, #1
 8005178:	e7c3      	b.n	8005102 <_printf_common+0x46>
 800517a:	18e1      	adds	r1, r4, r3
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	2030      	movs	r0, #48	; 0x30
 8005180:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005184:	4422      	add	r2, r4
 8005186:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800518a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800518e:	3302      	adds	r3, #2
 8005190:	e7c5      	b.n	800511e <_printf_common+0x62>
 8005192:	2301      	movs	r3, #1
 8005194:	4622      	mov	r2, r4
 8005196:	4639      	mov	r1, r7
 8005198:	4630      	mov	r0, r6
 800519a:	47c0      	blx	r8
 800519c:	3001      	adds	r0, #1
 800519e:	d0e6      	beq.n	800516e <_printf_common+0xb2>
 80051a0:	f109 0901 	add.w	r9, r9, #1
 80051a4:	e7d8      	b.n	8005158 <_printf_common+0x9c>
	...

080051a8 <_printf_i>:
 80051a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80051b0:	460c      	mov	r4, r1
 80051b2:	7e09      	ldrb	r1, [r1, #24]
 80051b4:	b085      	sub	sp, #20
 80051b6:	296e      	cmp	r1, #110	; 0x6e
 80051b8:	4617      	mov	r7, r2
 80051ba:	4606      	mov	r6, r0
 80051bc:	4698      	mov	r8, r3
 80051be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051c0:	f000 80b3 	beq.w	800532a <_printf_i+0x182>
 80051c4:	d822      	bhi.n	800520c <_printf_i+0x64>
 80051c6:	2963      	cmp	r1, #99	; 0x63
 80051c8:	d036      	beq.n	8005238 <_printf_i+0x90>
 80051ca:	d80a      	bhi.n	80051e2 <_printf_i+0x3a>
 80051cc:	2900      	cmp	r1, #0
 80051ce:	f000 80b9 	beq.w	8005344 <_printf_i+0x19c>
 80051d2:	2958      	cmp	r1, #88	; 0x58
 80051d4:	f000 8083 	beq.w	80052de <_printf_i+0x136>
 80051d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80051e0:	e032      	b.n	8005248 <_printf_i+0xa0>
 80051e2:	2964      	cmp	r1, #100	; 0x64
 80051e4:	d001      	beq.n	80051ea <_printf_i+0x42>
 80051e6:	2969      	cmp	r1, #105	; 0x69
 80051e8:	d1f6      	bne.n	80051d8 <_printf_i+0x30>
 80051ea:	6820      	ldr	r0, [r4, #0]
 80051ec:	6813      	ldr	r3, [r2, #0]
 80051ee:	0605      	lsls	r5, r0, #24
 80051f0:	f103 0104 	add.w	r1, r3, #4
 80051f4:	d52a      	bpl.n	800524c <_printf_i+0xa4>
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6011      	str	r1, [r2, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	da03      	bge.n	8005206 <_printf_i+0x5e>
 80051fe:	222d      	movs	r2, #45	; 0x2d
 8005200:	425b      	negs	r3, r3
 8005202:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005206:	486f      	ldr	r0, [pc, #444]	; (80053c4 <_printf_i+0x21c>)
 8005208:	220a      	movs	r2, #10
 800520a:	e039      	b.n	8005280 <_printf_i+0xd8>
 800520c:	2973      	cmp	r1, #115	; 0x73
 800520e:	f000 809d 	beq.w	800534c <_printf_i+0x1a4>
 8005212:	d808      	bhi.n	8005226 <_printf_i+0x7e>
 8005214:	296f      	cmp	r1, #111	; 0x6f
 8005216:	d020      	beq.n	800525a <_printf_i+0xb2>
 8005218:	2970      	cmp	r1, #112	; 0x70
 800521a:	d1dd      	bne.n	80051d8 <_printf_i+0x30>
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	f043 0320 	orr.w	r3, r3, #32
 8005222:	6023      	str	r3, [r4, #0]
 8005224:	e003      	b.n	800522e <_printf_i+0x86>
 8005226:	2975      	cmp	r1, #117	; 0x75
 8005228:	d017      	beq.n	800525a <_printf_i+0xb2>
 800522a:	2978      	cmp	r1, #120	; 0x78
 800522c:	d1d4      	bne.n	80051d8 <_printf_i+0x30>
 800522e:	2378      	movs	r3, #120	; 0x78
 8005230:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005234:	4864      	ldr	r0, [pc, #400]	; (80053c8 <_printf_i+0x220>)
 8005236:	e055      	b.n	80052e4 <_printf_i+0x13c>
 8005238:	6813      	ldr	r3, [r2, #0]
 800523a:	1d19      	adds	r1, r3, #4
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6011      	str	r1, [r2, #0]
 8005240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005248:	2301      	movs	r3, #1
 800524a:	e08c      	b.n	8005366 <_printf_i+0x1be>
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6011      	str	r1, [r2, #0]
 8005250:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005254:	bf18      	it	ne
 8005256:	b21b      	sxthne	r3, r3
 8005258:	e7cf      	b.n	80051fa <_printf_i+0x52>
 800525a:	6813      	ldr	r3, [r2, #0]
 800525c:	6825      	ldr	r5, [r4, #0]
 800525e:	1d18      	adds	r0, r3, #4
 8005260:	6010      	str	r0, [r2, #0]
 8005262:	0628      	lsls	r0, r5, #24
 8005264:	d501      	bpl.n	800526a <_printf_i+0xc2>
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	e002      	b.n	8005270 <_printf_i+0xc8>
 800526a:	0668      	lsls	r0, r5, #25
 800526c:	d5fb      	bpl.n	8005266 <_printf_i+0xbe>
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	4854      	ldr	r0, [pc, #336]	; (80053c4 <_printf_i+0x21c>)
 8005272:	296f      	cmp	r1, #111	; 0x6f
 8005274:	bf14      	ite	ne
 8005276:	220a      	movne	r2, #10
 8005278:	2208      	moveq	r2, #8
 800527a:	2100      	movs	r1, #0
 800527c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005280:	6865      	ldr	r5, [r4, #4]
 8005282:	60a5      	str	r5, [r4, #8]
 8005284:	2d00      	cmp	r5, #0
 8005286:	f2c0 8095 	blt.w	80053b4 <_printf_i+0x20c>
 800528a:	6821      	ldr	r1, [r4, #0]
 800528c:	f021 0104 	bic.w	r1, r1, #4
 8005290:	6021      	str	r1, [r4, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d13d      	bne.n	8005312 <_printf_i+0x16a>
 8005296:	2d00      	cmp	r5, #0
 8005298:	f040 808e 	bne.w	80053b8 <_printf_i+0x210>
 800529c:	4665      	mov	r5, ip
 800529e:	2a08      	cmp	r2, #8
 80052a0:	d10b      	bne.n	80052ba <_printf_i+0x112>
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	07db      	lsls	r3, r3, #31
 80052a6:	d508      	bpl.n	80052ba <_printf_i+0x112>
 80052a8:	6923      	ldr	r3, [r4, #16]
 80052aa:	6862      	ldr	r2, [r4, #4]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	bfde      	ittt	le
 80052b0:	2330      	movle	r3, #48	; 0x30
 80052b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052ba:	ebac 0305 	sub.w	r3, ip, r5
 80052be:	6123      	str	r3, [r4, #16]
 80052c0:	f8cd 8000 	str.w	r8, [sp]
 80052c4:	463b      	mov	r3, r7
 80052c6:	aa03      	add	r2, sp, #12
 80052c8:	4621      	mov	r1, r4
 80052ca:	4630      	mov	r0, r6
 80052cc:	f7ff fef6 	bl	80050bc <_printf_common>
 80052d0:	3001      	adds	r0, #1
 80052d2:	d14d      	bne.n	8005370 <_printf_i+0x1c8>
 80052d4:	f04f 30ff 	mov.w	r0, #4294967295
 80052d8:	b005      	add	sp, #20
 80052da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052de:	4839      	ldr	r0, [pc, #228]	; (80053c4 <_printf_i+0x21c>)
 80052e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80052e4:	6813      	ldr	r3, [r2, #0]
 80052e6:	6821      	ldr	r1, [r4, #0]
 80052e8:	1d1d      	adds	r5, r3, #4
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6015      	str	r5, [r2, #0]
 80052ee:	060a      	lsls	r2, r1, #24
 80052f0:	d50b      	bpl.n	800530a <_printf_i+0x162>
 80052f2:	07ca      	lsls	r2, r1, #31
 80052f4:	bf44      	itt	mi
 80052f6:	f041 0120 	orrmi.w	r1, r1, #32
 80052fa:	6021      	strmi	r1, [r4, #0]
 80052fc:	b91b      	cbnz	r3, 8005306 <_printf_i+0x15e>
 80052fe:	6822      	ldr	r2, [r4, #0]
 8005300:	f022 0220 	bic.w	r2, r2, #32
 8005304:	6022      	str	r2, [r4, #0]
 8005306:	2210      	movs	r2, #16
 8005308:	e7b7      	b.n	800527a <_printf_i+0xd2>
 800530a:	064d      	lsls	r5, r1, #25
 800530c:	bf48      	it	mi
 800530e:	b29b      	uxthmi	r3, r3
 8005310:	e7ef      	b.n	80052f2 <_printf_i+0x14a>
 8005312:	4665      	mov	r5, ip
 8005314:	fbb3 f1f2 	udiv	r1, r3, r2
 8005318:	fb02 3311 	mls	r3, r2, r1, r3
 800531c:	5cc3      	ldrb	r3, [r0, r3]
 800531e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005322:	460b      	mov	r3, r1
 8005324:	2900      	cmp	r1, #0
 8005326:	d1f5      	bne.n	8005314 <_printf_i+0x16c>
 8005328:	e7b9      	b.n	800529e <_printf_i+0xf6>
 800532a:	6813      	ldr	r3, [r2, #0]
 800532c:	6825      	ldr	r5, [r4, #0]
 800532e:	6961      	ldr	r1, [r4, #20]
 8005330:	1d18      	adds	r0, r3, #4
 8005332:	6010      	str	r0, [r2, #0]
 8005334:	0628      	lsls	r0, r5, #24
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	d501      	bpl.n	800533e <_printf_i+0x196>
 800533a:	6019      	str	r1, [r3, #0]
 800533c:	e002      	b.n	8005344 <_printf_i+0x19c>
 800533e:	066a      	lsls	r2, r5, #25
 8005340:	d5fb      	bpl.n	800533a <_printf_i+0x192>
 8005342:	8019      	strh	r1, [r3, #0]
 8005344:	2300      	movs	r3, #0
 8005346:	6123      	str	r3, [r4, #16]
 8005348:	4665      	mov	r5, ip
 800534a:	e7b9      	b.n	80052c0 <_printf_i+0x118>
 800534c:	6813      	ldr	r3, [r2, #0]
 800534e:	1d19      	adds	r1, r3, #4
 8005350:	6011      	str	r1, [r2, #0]
 8005352:	681d      	ldr	r5, [r3, #0]
 8005354:	6862      	ldr	r2, [r4, #4]
 8005356:	2100      	movs	r1, #0
 8005358:	4628      	mov	r0, r5
 800535a:	f7fa ff39 	bl	80001d0 <memchr>
 800535e:	b108      	cbz	r0, 8005364 <_printf_i+0x1bc>
 8005360:	1b40      	subs	r0, r0, r5
 8005362:	6060      	str	r0, [r4, #4]
 8005364:	6863      	ldr	r3, [r4, #4]
 8005366:	6123      	str	r3, [r4, #16]
 8005368:	2300      	movs	r3, #0
 800536a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800536e:	e7a7      	b.n	80052c0 <_printf_i+0x118>
 8005370:	6923      	ldr	r3, [r4, #16]
 8005372:	462a      	mov	r2, r5
 8005374:	4639      	mov	r1, r7
 8005376:	4630      	mov	r0, r6
 8005378:	47c0      	blx	r8
 800537a:	3001      	adds	r0, #1
 800537c:	d0aa      	beq.n	80052d4 <_printf_i+0x12c>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	079b      	lsls	r3, r3, #30
 8005382:	d413      	bmi.n	80053ac <_printf_i+0x204>
 8005384:	68e0      	ldr	r0, [r4, #12]
 8005386:	9b03      	ldr	r3, [sp, #12]
 8005388:	4298      	cmp	r0, r3
 800538a:	bfb8      	it	lt
 800538c:	4618      	movlt	r0, r3
 800538e:	e7a3      	b.n	80052d8 <_printf_i+0x130>
 8005390:	2301      	movs	r3, #1
 8005392:	464a      	mov	r2, r9
 8005394:	4639      	mov	r1, r7
 8005396:	4630      	mov	r0, r6
 8005398:	47c0      	blx	r8
 800539a:	3001      	adds	r0, #1
 800539c:	d09a      	beq.n	80052d4 <_printf_i+0x12c>
 800539e:	3501      	adds	r5, #1
 80053a0:	68e3      	ldr	r3, [r4, #12]
 80053a2:	9a03      	ldr	r2, [sp, #12]
 80053a4:	1a9b      	subs	r3, r3, r2
 80053a6:	42ab      	cmp	r3, r5
 80053a8:	dcf2      	bgt.n	8005390 <_printf_i+0x1e8>
 80053aa:	e7eb      	b.n	8005384 <_printf_i+0x1dc>
 80053ac:	2500      	movs	r5, #0
 80053ae:	f104 0919 	add.w	r9, r4, #25
 80053b2:	e7f5      	b.n	80053a0 <_printf_i+0x1f8>
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1ac      	bne.n	8005312 <_printf_i+0x16a>
 80053b8:	7803      	ldrb	r3, [r0, #0]
 80053ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053c2:	e76c      	b.n	800529e <_printf_i+0xf6>
 80053c4:	08005a85 	.word	0x08005a85
 80053c8:	08005a96 	.word	0x08005a96

080053cc <_sbrk_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4c06      	ldr	r4, [pc, #24]	; (80053e8 <_sbrk_r+0x1c>)
 80053d0:	2300      	movs	r3, #0
 80053d2:	4605      	mov	r5, r0
 80053d4:	4608      	mov	r0, r1
 80053d6:	6023      	str	r3, [r4, #0]
 80053d8:	f7fb ff92 	bl	8001300 <_sbrk>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d102      	bne.n	80053e6 <_sbrk_r+0x1a>
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	b103      	cbz	r3, 80053e6 <_sbrk_r+0x1a>
 80053e4:	602b      	str	r3, [r5, #0]
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	200001a4 	.word	0x200001a4

080053ec <__sread>:
 80053ec:	b510      	push	{r4, lr}
 80053ee:	460c      	mov	r4, r1
 80053f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f4:	f000 fa96 	bl	8005924 <_read_r>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	bfab      	itete	ge
 80053fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005400:	181b      	addge	r3, r3, r0
 8005402:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005406:	bfac      	ite	ge
 8005408:	6563      	strge	r3, [r4, #84]	; 0x54
 800540a:	81a3      	strhlt	r3, [r4, #12]
 800540c:	bd10      	pop	{r4, pc}

0800540e <__swrite>:
 800540e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005412:	461f      	mov	r7, r3
 8005414:	898b      	ldrh	r3, [r1, #12]
 8005416:	05db      	lsls	r3, r3, #23
 8005418:	4605      	mov	r5, r0
 800541a:	460c      	mov	r4, r1
 800541c:	4616      	mov	r6, r2
 800541e:	d505      	bpl.n	800542c <__swrite+0x1e>
 8005420:	2302      	movs	r3, #2
 8005422:	2200      	movs	r2, #0
 8005424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005428:	f000 f9b6 	bl	8005798 <_lseek_r>
 800542c:	89a3      	ldrh	r3, [r4, #12]
 800542e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005432:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005436:	81a3      	strh	r3, [r4, #12]
 8005438:	4632      	mov	r2, r6
 800543a:	463b      	mov	r3, r7
 800543c:	4628      	mov	r0, r5
 800543e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005442:	f000 b869 	b.w	8005518 <_write_r>

08005446 <__sseek>:
 8005446:	b510      	push	{r4, lr}
 8005448:	460c      	mov	r4, r1
 800544a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800544e:	f000 f9a3 	bl	8005798 <_lseek_r>
 8005452:	1c43      	adds	r3, r0, #1
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	bf15      	itete	ne
 8005458:	6560      	strne	r0, [r4, #84]	; 0x54
 800545a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800545e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005462:	81a3      	strheq	r3, [r4, #12]
 8005464:	bf18      	it	ne
 8005466:	81a3      	strhne	r3, [r4, #12]
 8005468:	bd10      	pop	{r4, pc}

0800546a <__sclose>:
 800546a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800546e:	f000 b8d3 	b.w	8005618 <_close_r>
	...

08005474 <__swbuf_r>:
 8005474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005476:	460e      	mov	r6, r1
 8005478:	4614      	mov	r4, r2
 800547a:	4605      	mov	r5, r0
 800547c:	b118      	cbz	r0, 8005486 <__swbuf_r+0x12>
 800547e:	6983      	ldr	r3, [r0, #24]
 8005480:	b90b      	cbnz	r3, 8005486 <__swbuf_r+0x12>
 8005482:	f7ff fbf7 	bl	8004c74 <__sinit>
 8005486:	4b21      	ldr	r3, [pc, #132]	; (800550c <__swbuf_r+0x98>)
 8005488:	429c      	cmp	r4, r3
 800548a:	d12a      	bne.n	80054e2 <__swbuf_r+0x6e>
 800548c:	686c      	ldr	r4, [r5, #4]
 800548e:	69a3      	ldr	r3, [r4, #24]
 8005490:	60a3      	str	r3, [r4, #8]
 8005492:	89a3      	ldrh	r3, [r4, #12]
 8005494:	071a      	lsls	r2, r3, #28
 8005496:	d52e      	bpl.n	80054f6 <__swbuf_r+0x82>
 8005498:	6923      	ldr	r3, [r4, #16]
 800549a:	b363      	cbz	r3, 80054f6 <__swbuf_r+0x82>
 800549c:	6923      	ldr	r3, [r4, #16]
 800549e:	6820      	ldr	r0, [r4, #0]
 80054a0:	1ac0      	subs	r0, r0, r3
 80054a2:	6963      	ldr	r3, [r4, #20]
 80054a4:	b2f6      	uxtb	r6, r6
 80054a6:	4283      	cmp	r3, r0
 80054a8:	4637      	mov	r7, r6
 80054aa:	dc04      	bgt.n	80054b6 <__swbuf_r+0x42>
 80054ac:	4621      	mov	r1, r4
 80054ae:	4628      	mov	r0, r5
 80054b0:	f000 f948 	bl	8005744 <_fflush_r>
 80054b4:	bb28      	cbnz	r0, 8005502 <__swbuf_r+0x8e>
 80054b6:	68a3      	ldr	r3, [r4, #8]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	60a3      	str	r3, [r4, #8]
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	6022      	str	r2, [r4, #0]
 80054c2:	701e      	strb	r6, [r3, #0]
 80054c4:	6963      	ldr	r3, [r4, #20]
 80054c6:	3001      	adds	r0, #1
 80054c8:	4283      	cmp	r3, r0
 80054ca:	d004      	beq.n	80054d6 <__swbuf_r+0x62>
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	07db      	lsls	r3, r3, #31
 80054d0:	d519      	bpl.n	8005506 <__swbuf_r+0x92>
 80054d2:	2e0a      	cmp	r6, #10
 80054d4:	d117      	bne.n	8005506 <__swbuf_r+0x92>
 80054d6:	4621      	mov	r1, r4
 80054d8:	4628      	mov	r0, r5
 80054da:	f000 f933 	bl	8005744 <_fflush_r>
 80054de:	b190      	cbz	r0, 8005506 <__swbuf_r+0x92>
 80054e0:	e00f      	b.n	8005502 <__swbuf_r+0x8e>
 80054e2:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <__swbuf_r+0x9c>)
 80054e4:	429c      	cmp	r4, r3
 80054e6:	d101      	bne.n	80054ec <__swbuf_r+0x78>
 80054e8:	68ac      	ldr	r4, [r5, #8]
 80054ea:	e7d0      	b.n	800548e <__swbuf_r+0x1a>
 80054ec:	4b09      	ldr	r3, [pc, #36]	; (8005514 <__swbuf_r+0xa0>)
 80054ee:	429c      	cmp	r4, r3
 80054f0:	bf08      	it	eq
 80054f2:	68ec      	ldreq	r4, [r5, #12]
 80054f4:	e7cb      	b.n	800548e <__swbuf_r+0x1a>
 80054f6:	4621      	mov	r1, r4
 80054f8:	4628      	mov	r0, r5
 80054fa:	f000 f81f 	bl	800553c <__swsetup_r>
 80054fe:	2800      	cmp	r0, #0
 8005500:	d0cc      	beq.n	800549c <__swbuf_r+0x28>
 8005502:	f04f 37ff 	mov.w	r7, #4294967295
 8005506:	4638      	mov	r0, r7
 8005508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800550a:	bf00      	nop
 800550c:	08005a34 	.word	0x08005a34
 8005510:	08005a54 	.word	0x08005a54
 8005514:	08005a14 	.word	0x08005a14

08005518 <_write_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4c07      	ldr	r4, [pc, #28]	; (8005538 <_write_r+0x20>)
 800551c:	4605      	mov	r5, r0
 800551e:	4608      	mov	r0, r1
 8005520:	4611      	mov	r1, r2
 8005522:	2200      	movs	r2, #0
 8005524:	6022      	str	r2, [r4, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	f7fb fe9a 	bl	8001260 <_write>
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	d102      	bne.n	8005536 <_write_r+0x1e>
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	b103      	cbz	r3, 8005536 <_write_r+0x1e>
 8005534:	602b      	str	r3, [r5, #0]
 8005536:	bd38      	pop	{r3, r4, r5, pc}
 8005538:	200001a4 	.word	0x200001a4

0800553c <__swsetup_r>:
 800553c:	4b32      	ldr	r3, [pc, #200]	; (8005608 <__swsetup_r+0xcc>)
 800553e:	b570      	push	{r4, r5, r6, lr}
 8005540:	681d      	ldr	r5, [r3, #0]
 8005542:	4606      	mov	r6, r0
 8005544:	460c      	mov	r4, r1
 8005546:	b125      	cbz	r5, 8005552 <__swsetup_r+0x16>
 8005548:	69ab      	ldr	r3, [r5, #24]
 800554a:	b913      	cbnz	r3, 8005552 <__swsetup_r+0x16>
 800554c:	4628      	mov	r0, r5
 800554e:	f7ff fb91 	bl	8004c74 <__sinit>
 8005552:	4b2e      	ldr	r3, [pc, #184]	; (800560c <__swsetup_r+0xd0>)
 8005554:	429c      	cmp	r4, r3
 8005556:	d10f      	bne.n	8005578 <__swsetup_r+0x3c>
 8005558:	686c      	ldr	r4, [r5, #4]
 800555a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800555e:	b29a      	uxth	r2, r3
 8005560:	0715      	lsls	r5, r2, #28
 8005562:	d42c      	bmi.n	80055be <__swsetup_r+0x82>
 8005564:	06d0      	lsls	r0, r2, #27
 8005566:	d411      	bmi.n	800558c <__swsetup_r+0x50>
 8005568:	2209      	movs	r2, #9
 800556a:	6032      	str	r2, [r6, #0]
 800556c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005570:	81a3      	strh	r3, [r4, #12]
 8005572:	f04f 30ff 	mov.w	r0, #4294967295
 8005576:	e03e      	b.n	80055f6 <__swsetup_r+0xba>
 8005578:	4b25      	ldr	r3, [pc, #148]	; (8005610 <__swsetup_r+0xd4>)
 800557a:	429c      	cmp	r4, r3
 800557c:	d101      	bne.n	8005582 <__swsetup_r+0x46>
 800557e:	68ac      	ldr	r4, [r5, #8]
 8005580:	e7eb      	b.n	800555a <__swsetup_r+0x1e>
 8005582:	4b24      	ldr	r3, [pc, #144]	; (8005614 <__swsetup_r+0xd8>)
 8005584:	429c      	cmp	r4, r3
 8005586:	bf08      	it	eq
 8005588:	68ec      	ldreq	r4, [r5, #12]
 800558a:	e7e6      	b.n	800555a <__swsetup_r+0x1e>
 800558c:	0751      	lsls	r1, r2, #29
 800558e:	d512      	bpl.n	80055b6 <__swsetup_r+0x7a>
 8005590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005592:	b141      	cbz	r1, 80055a6 <__swsetup_r+0x6a>
 8005594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005598:	4299      	cmp	r1, r3
 800559a:	d002      	beq.n	80055a2 <__swsetup_r+0x66>
 800559c:	4630      	mov	r0, r6
 800559e:	f000 f973 	bl	8005888 <_free_r>
 80055a2:	2300      	movs	r3, #0
 80055a4:	6363      	str	r3, [r4, #52]	; 0x34
 80055a6:	89a3      	ldrh	r3, [r4, #12]
 80055a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055ac:	81a3      	strh	r3, [r4, #12]
 80055ae:	2300      	movs	r3, #0
 80055b0:	6063      	str	r3, [r4, #4]
 80055b2:	6923      	ldr	r3, [r4, #16]
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	89a3      	ldrh	r3, [r4, #12]
 80055b8:	f043 0308 	orr.w	r3, r3, #8
 80055bc:	81a3      	strh	r3, [r4, #12]
 80055be:	6923      	ldr	r3, [r4, #16]
 80055c0:	b94b      	cbnz	r3, 80055d6 <__swsetup_r+0x9a>
 80055c2:	89a3      	ldrh	r3, [r4, #12]
 80055c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055cc:	d003      	beq.n	80055d6 <__swsetup_r+0x9a>
 80055ce:	4621      	mov	r1, r4
 80055d0:	4630      	mov	r0, r6
 80055d2:	f000 f917 	bl	8005804 <__smakebuf_r>
 80055d6:	89a2      	ldrh	r2, [r4, #12]
 80055d8:	f012 0301 	ands.w	r3, r2, #1
 80055dc:	d00c      	beq.n	80055f8 <__swsetup_r+0xbc>
 80055de:	2300      	movs	r3, #0
 80055e0:	60a3      	str	r3, [r4, #8]
 80055e2:	6963      	ldr	r3, [r4, #20]
 80055e4:	425b      	negs	r3, r3
 80055e6:	61a3      	str	r3, [r4, #24]
 80055e8:	6923      	ldr	r3, [r4, #16]
 80055ea:	b953      	cbnz	r3, 8005602 <__swsetup_r+0xc6>
 80055ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80055f4:	d1ba      	bne.n	800556c <__swsetup_r+0x30>
 80055f6:	bd70      	pop	{r4, r5, r6, pc}
 80055f8:	0792      	lsls	r2, r2, #30
 80055fa:	bf58      	it	pl
 80055fc:	6963      	ldrpl	r3, [r4, #20]
 80055fe:	60a3      	str	r3, [r4, #8]
 8005600:	e7f2      	b.n	80055e8 <__swsetup_r+0xac>
 8005602:	2000      	movs	r0, #0
 8005604:	e7f7      	b.n	80055f6 <__swsetup_r+0xba>
 8005606:	bf00      	nop
 8005608:	2000000c 	.word	0x2000000c
 800560c:	08005a34 	.word	0x08005a34
 8005610:	08005a54 	.word	0x08005a54
 8005614:	08005a14 	.word	0x08005a14

08005618 <_close_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4c06      	ldr	r4, [pc, #24]	; (8005634 <_close_r+0x1c>)
 800561c:	2300      	movs	r3, #0
 800561e:	4605      	mov	r5, r0
 8005620:	4608      	mov	r0, r1
 8005622:	6023      	str	r3, [r4, #0]
 8005624:	f7fb fe38 	bl	8001298 <_close>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d102      	bne.n	8005632 <_close_r+0x1a>
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	b103      	cbz	r3, 8005632 <_close_r+0x1a>
 8005630:	602b      	str	r3, [r5, #0]
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	200001a4 	.word	0x200001a4

08005638 <__sflush_r>:
 8005638:	898a      	ldrh	r2, [r1, #12]
 800563a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800563e:	4605      	mov	r5, r0
 8005640:	0710      	lsls	r0, r2, #28
 8005642:	460c      	mov	r4, r1
 8005644:	d458      	bmi.n	80056f8 <__sflush_r+0xc0>
 8005646:	684b      	ldr	r3, [r1, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	dc05      	bgt.n	8005658 <__sflush_r+0x20>
 800564c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	dc02      	bgt.n	8005658 <__sflush_r+0x20>
 8005652:	2000      	movs	r0, #0
 8005654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800565a:	2e00      	cmp	r6, #0
 800565c:	d0f9      	beq.n	8005652 <__sflush_r+0x1a>
 800565e:	2300      	movs	r3, #0
 8005660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005664:	682f      	ldr	r7, [r5, #0]
 8005666:	6a21      	ldr	r1, [r4, #32]
 8005668:	602b      	str	r3, [r5, #0]
 800566a:	d032      	beq.n	80056d2 <__sflush_r+0x9a>
 800566c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800566e:	89a3      	ldrh	r3, [r4, #12]
 8005670:	075a      	lsls	r2, r3, #29
 8005672:	d505      	bpl.n	8005680 <__sflush_r+0x48>
 8005674:	6863      	ldr	r3, [r4, #4]
 8005676:	1ac0      	subs	r0, r0, r3
 8005678:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800567a:	b10b      	cbz	r3, 8005680 <__sflush_r+0x48>
 800567c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800567e:	1ac0      	subs	r0, r0, r3
 8005680:	2300      	movs	r3, #0
 8005682:	4602      	mov	r2, r0
 8005684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005686:	6a21      	ldr	r1, [r4, #32]
 8005688:	4628      	mov	r0, r5
 800568a:	47b0      	blx	r6
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	89a3      	ldrh	r3, [r4, #12]
 8005690:	d106      	bne.n	80056a0 <__sflush_r+0x68>
 8005692:	6829      	ldr	r1, [r5, #0]
 8005694:	291d      	cmp	r1, #29
 8005696:	d848      	bhi.n	800572a <__sflush_r+0xf2>
 8005698:	4a29      	ldr	r2, [pc, #164]	; (8005740 <__sflush_r+0x108>)
 800569a:	40ca      	lsrs	r2, r1
 800569c:	07d6      	lsls	r6, r2, #31
 800569e:	d544      	bpl.n	800572a <__sflush_r+0xf2>
 80056a0:	2200      	movs	r2, #0
 80056a2:	6062      	str	r2, [r4, #4]
 80056a4:	04d9      	lsls	r1, r3, #19
 80056a6:	6922      	ldr	r2, [r4, #16]
 80056a8:	6022      	str	r2, [r4, #0]
 80056aa:	d504      	bpl.n	80056b6 <__sflush_r+0x7e>
 80056ac:	1c42      	adds	r2, r0, #1
 80056ae:	d101      	bne.n	80056b4 <__sflush_r+0x7c>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	b903      	cbnz	r3, 80056b6 <__sflush_r+0x7e>
 80056b4:	6560      	str	r0, [r4, #84]	; 0x54
 80056b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056b8:	602f      	str	r7, [r5, #0]
 80056ba:	2900      	cmp	r1, #0
 80056bc:	d0c9      	beq.n	8005652 <__sflush_r+0x1a>
 80056be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056c2:	4299      	cmp	r1, r3
 80056c4:	d002      	beq.n	80056cc <__sflush_r+0x94>
 80056c6:	4628      	mov	r0, r5
 80056c8:	f000 f8de 	bl	8005888 <_free_r>
 80056cc:	2000      	movs	r0, #0
 80056ce:	6360      	str	r0, [r4, #52]	; 0x34
 80056d0:	e7c0      	b.n	8005654 <__sflush_r+0x1c>
 80056d2:	2301      	movs	r3, #1
 80056d4:	4628      	mov	r0, r5
 80056d6:	47b0      	blx	r6
 80056d8:	1c41      	adds	r1, r0, #1
 80056da:	d1c8      	bne.n	800566e <__sflush_r+0x36>
 80056dc:	682b      	ldr	r3, [r5, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0c5      	beq.n	800566e <__sflush_r+0x36>
 80056e2:	2b1d      	cmp	r3, #29
 80056e4:	d001      	beq.n	80056ea <__sflush_r+0xb2>
 80056e6:	2b16      	cmp	r3, #22
 80056e8:	d101      	bne.n	80056ee <__sflush_r+0xb6>
 80056ea:	602f      	str	r7, [r5, #0]
 80056ec:	e7b1      	b.n	8005652 <__sflush_r+0x1a>
 80056ee:	89a3      	ldrh	r3, [r4, #12]
 80056f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056f4:	81a3      	strh	r3, [r4, #12]
 80056f6:	e7ad      	b.n	8005654 <__sflush_r+0x1c>
 80056f8:	690f      	ldr	r7, [r1, #16]
 80056fa:	2f00      	cmp	r7, #0
 80056fc:	d0a9      	beq.n	8005652 <__sflush_r+0x1a>
 80056fe:	0793      	lsls	r3, r2, #30
 8005700:	680e      	ldr	r6, [r1, #0]
 8005702:	bf08      	it	eq
 8005704:	694b      	ldreq	r3, [r1, #20]
 8005706:	600f      	str	r7, [r1, #0]
 8005708:	bf18      	it	ne
 800570a:	2300      	movne	r3, #0
 800570c:	eba6 0807 	sub.w	r8, r6, r7
 8005710:	608b      	str	r3, [r1, #8]
 8005712:	f1b8 0f00 	cmp.w	r8, #0
 8005716:	dd9c      	ble.n	8005652 <__sflush_r+0x1a>
 8005718:	4643      	mov	r3, r8
 800571a:	463a      	mov	r2, r7
 800571c:	6a21      	ldr	r1, [r4, #32]
 800571e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005720:	4628      	mov	r0, r5
 8005722:	47b0      	blx	r6
 8005724:	2800      	cmp	r0, #0
 8005726:	dc06      	bgt.n	8005736 <__sflush_r+0xfe>
 8005728:	89a3      	ldrh	r3, [r4, #12]
 800572a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800572e:	81a3      	strh	r3, [r4, #12]
 8005730:	f04f 30ff 	mov.w	r0, #4294967295
 8005734:	e78e      	b.n	8005654 <__sflush_r+0x1c>
 8005736:	4407      	add	r7, r0
 8005738:	eba8 0800 	sub.w	r8, r8, r0
 800573c:	e7e9      	b.n	8005712 <__sflush_r+0xda>
 800573e:	bf00      	nop
 8005740:	20400001 	.word	0x20400001

08005744 <_fflush_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	690b      	ldr	r3, [r1, #16]
 8005748:	4605      	mov	r5, r0
 800574a:	460c      	mov	r4, r1
 800574c:	b1db      	cbz	r3, 8005786 <_fflush_r+0x42>
 800574e:	b118      	cbz	r0, 8005758 <_fflush_r+0x14>
 8005750:	6983      	ldr	r3, [r0, #24]
 8005752:	b90b      	cbnz	r3, 8005758 <_fflush_r+0x14>
 8005754:	f7ff fa8e 	bl	8004c74 <__sinit>
 8005758:	4b0c      	ldr	r3, [pc, #48]	; (800578c <_fflush_r+0x48>)
 800575a:	429c      	cmp	r4, r3
 800575c:	d109      	bne.n	8005772 <_fflush_r+0x2e>
 800575e:	686c      	ldr	r4, [r5, #4]
 8005760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005764:	b17b      	cbz	r3, 8005786 <_fflush_r+0x42>
 8005766:	4621      	mov	r1, r4
 8005768:	4628      	mov	r0, r5
 800576a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800576e:	f7ff bf63 	b.w	8005638 <__sflush_r>
 8005772:	4b07      	ldr	r3, [pc, #28]	; (8005790 <_fflush_r+0x4c>)
 8005774:	429c      	cmp	r4, r3
 8005776:	d101      	bne.n	800577c <_fflush_r+0x38>
 8005778:	68ac      	ldr	r4, [r5, #8]
 800577a:	e7f1      	b.n	8005760 <_fflush_r+0x1c>
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <_fflush_r+0x50>)
 800577e:	429c      	cmp	r4, r3
 8005780:	bf08      	it	eq
 8005782:	68ec      	ldreq	r4, [r5, #12]
 8005784:	e7ec      	b.n	8005760 <_fflush_r+0x1c>
 8005786:	2000      	movs	r0, #0
 8005788:	bd38      	pop	{r3, r4, r5, pc}
 800578a:	bf00      	nop
 800578c:	08005a34 	.word	0x08005a34
 8005790:	08005a54 	.word	0x08005a54
 8005794:	08005a14 	.word	0x08005a14

08005798 <_lseek_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4c07      	ldr	r4, [pc, #28]	; (80057b8 <_lseek_r+0x20>)
 800579c:	4605      	mov	r5, r0
 800579e:	4608      	mov	r0, r1
 80057a0:	4611      	mov	r1, r2
 80057a2:	2200      	movs	r2, #0
 80057a4:	6022      	str	r2, [r4, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f7fb fd9d 	bl	80012e6 <_lseek>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	d102      	bne.n	80057b6 <_lseek_r+0x1e>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	b103      	cbz	r3, 80057b6 <_lseek_r+0x1e>
 80057b4:	602b      	str	r3, [r5, #0]
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	200001a4 	.word	0x200001a4

080057bc <__swhatbuf_r>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	460e      	mov	r6, r1
 80057c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c4:	2900      	cmp	r1, #0
 80057c6:	b096      	sub	sp, #88	; 0x58
 80057c8:	4614      	mov	r4, r2
 80057ca:	461d      	mov	r5, r3
 80057cc:	da07      	bge.n	80057de <__swhatbuf_r+0x22>
 80057ce:	2300      	movs	r3, #0
 80057d0:	602b      	str	r3, [r5, #0]
 80057d2:	89b3      	ldrh	r3, [r6, #12]
 80057d4:	061a      	lsls	r2, r3, #24
 80057d6:	d410      	bmi.n	80057fa <__swhatbuf_r+0x3e>
 80057d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057dc:	e00e      	b.n	80057fc <__swhatbuf_r+0x40>
 80057de:	466a      	mov	r2, sp
 80057e0:	f000 f8b2 	bl	8005948 <_fstat_r>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	dbf2      	blt.n	80057ce <__swhatbuf_r+0x12>
 80057e8:	9a01      	ldr	r2, [sp, #4]
 80057ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80057ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80057f2:	425a      	negs	r2, r3
 80057f4:	415a      	adcs	r2, r3
 80057f6:	602a      	str	r2, [r5, #0]
 80057f8:	e7ee      	b.n	80057d8 <__swhatbuf_r+0x1c>
 80057fa:	2340      	movs	r3, #64	; 0x40
 80057fc:	2000      	movs	r0, #0
 80057fe:	6023      	str	r3, [r4, #0]
 8005800:	b016      	add	sp, #88	; 0x58
 8005802:	bd70      	pop	{r4, r5, r6, pc}

08005804 <__smakebuf_r>:
 8005804:	898b      	ldrh	r3, [r1, #12]
 8005806:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005808:	079d      	lsls	r5, r3, #30
 800580a:	4606      	mov	r6, r0
 800580c:	460c      	mov	r4, r1
 800580e:	d507      	bpl.n	8005820 <__smakebuf_r+0x1c>
 8005810:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005814:	6023      	str	r3, [r4, #0]
 8005816:	6123      	str	r3, [r4, #16]
 8005818:	2301      	movs	r3, #1
 800581a:	6163      	str	r3, [r4, #20]
 800581c:	b002      	add	sp, #8
 800581e:	bd70      	pop	{r4, r5, r6, pc}
 8005820:	ab01      	add	r3, sp, #4
 8005822:	466a      	mov	r2, sp
 8005824:	f7ff ffca 	bl	80057bc <__swhatbuf_r>
 8005828:	9900      	ldr	r1, [sp, #0]
 800582a:	4605      	mov	r5, r0
 800582c:	4630      	mov	r0, r6
 800582e:	f7ff faab 	bl	8004d88 <_malloc_r>
 8005832:	b948      	cbnz	r0, 8005848 <__smakebuf_r+0x44>
 8005834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005838:	059a      	lsls	r2, r3, #22
 800583a:	d4ef      	bmi.n	800581c <__smakebuf_r+0x18>
 800583c:	f023 0303 	bic.w	r3, r3, #3
 8005840:	f043 0302 	orr.w	r3, r3, #2
 8005844:	81a3      	strh	r3, [r4, #12]
 8005846:	e7e3      	b.n	8005810 <__smakebuf_r+0xc>
 8005848:	4b0d      	ldr	r3, [pc, #52]	; (8005880 <__smakebuf_r+0x7c>)
 800584a:	62b3      	str	r3, [r6, #40]	; 0x28
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	6020      	str	r0, [r4, #0]
 8005850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005854:	81a3      	strh	r3, [r4, #12]
 8005856:	9b00      	ldr	r3, [sp, #0]
 8005858:	6163      	str	r3, [r4, #20]
 800585a:	9b01      	ldr	r3, [sp, #4]
 800585c:	6120      	str	r0, [r4, #16]
 800585e:	b15b      	cbz	r3, 8005878 <__smakebuf_r+0x74>
 8005860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005864:	4630      	mov	r0, r6
 8005866:	f000 f881 	bl	800596c <_isatty_r>
 800586a:	b128      	cbz	r0, 8005878 <__smakebuf_r+0x74>
 800586c:	89a3      	ldrh	r3, [r4, #12]
 800586e:	f023 0303 	bic.w	r3, r3, #3
 8005872:	f043 0301 	orr.w	r3, r3, #1
 8005876:	81a3      	strh	r3, [r4, #12]
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	431d      	orrs	r5, r3
 800587c:	81a5      	strh	r5, [r4, #12]
 800587e:	e7cd      	b.n	800581c <__smakebuf_r+0x18>
 8005880:	08004c3d 	.word	0x08004c3d

08005884 <__malloc_lock>:
 8005884:	4770      	bx	lr

08005886 <__malloc_unlock>:
 8005886:	4770      	bx	lr

08005888 <_free_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4605      	mov	r5, r0
 800588c:	2900      	cmp	r1, #0
 800588e:	d045      	beq.n	800591c <_free_r+0x94>
 8005890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005894:	1f0c      	subs	r4, r1, #4
 8005896:	2b00      	cmp	r3, #0
 8005898:	bfb8      	it	lt
 800589a:	18e4      	addlt	r4, r4, r3
 800589c:	f7ff fff2 	bl	8005884 <__malloc_lock>
 80058a0:	4a1f      	ldr	r2, [pc, #124]	; (8005920 <_free_r+0x98>)
 80058a2:	6813      	ldr	r3, [r2, #0]
 80058a4:	4610      	mov	r0, r2
 80058a6:	b933      	cbnz	r3, 80058b6 <_free_r+0x2e>
 80058a8:	6063      	str	r3, [r4, #4]
 80058aa:	6014      	str	r4, [r2, #0]
 80058ac:	4628      	mov	r0, r5
 80058ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058b2:	f7ff bfe8 	b.w	8005886 <__malloc_unlock>
 80058b6:	42a3      	cmp	r3, r4
 80058b8:	d90c      	bls.n	80058d4 <_free_r+0x4c>
 80058ba:	6821      	ldr	r1, [r4, #0]
 80058bc:	1862      	adds	r2, r4, r1
 80058be:	4293      	cmp	r3, r2
 80058c0:	bf04      	itt	eq
 80058c2:	681a      	ldreq	r2, [r3, #0]
 80058c4:	685b      	ldreq	r3, [r3, #4]
 80058c6:	6063      	str	r3, [r4, #4]
 80058c8:	bf04      	itt	eq
 80058ca:	1852      	addeq	r2, r2, r1
 80058cc:	6022      	streq	r2, [r4, #0]
 80058ce:	6004      	str	r4, [r0, #0]
 80058d0:	e7ec      	b.n	80058ac <_free_r+0x24>
 80058d2:	4613      	mov	r3, r2
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	b10a      	cbz	r2, 80058dc <_free_r+0x54>
 80058d8:	42a2      	cmp	r2, r4
 80058da:	d9fa      	bls.n	80058d2 <_free_r+0x4a>
 80058dc:	6819      	ldr	r1, [r3, #0]
 80058de:	1858      	adds	r0, r3, r1
 80058e0:	42a0      	cmp	r0, r4
 80058e2:	d10b      	bne.n	80058fc <_free_r+0x74>
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	4401      	add	r1, r0
 80058e8:	1858      	adds	r0, r3, r1
 80058ea:	4282      	cmp	r2, r0
 80058ec:	6019      	str	r1, [r3, #0]
 80058ee:	d1dd      	bne.n	80058ac <_free_r+0x24>
 80058f0:	6810      	ldr	r0, [r2, #0]
 80058f2:	6852      	ldr	r2, [r2, #4]
 80058f4:	605a      	str	r2, [r3, #4]
 80058f6:	4401      	add	r1, r0
 80058f8:	6019      	str	r1, [r3, #0]
 80058fa:	e7d7      	b.n	80058ac <_free_r+0x24>
 80058fc:	d902      	bls.n	8005904 <_free_r+0x7c>
 80058fe:	230c      	movs	r3, #12
 8005900:	602b      	str	r3, [r5, #0]
 8005902:	e7d3      	b.n	80058ac <_free_r+0x24>
 8005904:	6820      	ldr	r0, [r4, #0]
 8005906:	1821      	adds	r1, r4, r0
 8005908:	428a      	cmp	r2, r1
 800590a:	bf04      	itt	eq
 800590c:	6811      	ldreq	r1, [r2, #0]
 800590e:	6852      	ldreq	r2, [r2, #4]
 8005910:	6062      	str	r2, [r4, #4]
 8005912:	bf04      	itt	eq
 8005914:	1809      	addeq	r1, r1, r0
 8005916:	6021      	streq	r1, [r4, #0]
 8005918:	605c      	str	r4, [r3, #4]
 800591a:	e7c7      	b.n	80058ac <_free_r+0x24>
 800591c:	bd38      	pop	{r3, r4, r5, pc}
 800591e:	bf00      	nop
 8005920:	20000098 	.word	0x20000098

08005924 <_read_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	4c07      	ldr	r4, [pc, #28]	; (8005944 <_read_r+0x20>)
 8005928:	4605      	mov	r5, r0
 800592a:	4608      	mov	r0, r1
 800592c:	4611      	mov	r1, r2
 800592e:	2200      	movs	r2, #0
 8005930:	6022      	str	r2, [r4, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	f7fb fc77 	bl	8001226 <_read>
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	d102      	bne.n	8005942 <_read_r+0x1e>
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	b103      	cbz	r3, 8005942 <_read_r+0x1e>
 8005940:	602b      	str	r3, [r5, #0]
 8005942:	bd38      	pop	{r3, r4, r5, pc}
 8005944:	200001a4 	.word	0x200001a4

08005948 <_fstat_r>:
 8005948:	b538      	push	{r3, r4, r5, lr}
 800594a:	4c07      	ldr	r4, [pc, #28]	; (8005968 <_fstat_r+0x20>)
 800594c:	2300      	movs	r3, #0
 800594e:	4605      	mov	r5, r0
 8005950:	4608      	mov	r0, r1
 8005952:	4611      	mov	r1, r2
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	f7fb fcab 	bl	80012b0 <_fstat>
 800595a:	1c43      	adds	r3, r0, #1
 800595c:	d102      	bne.n	8005964 <_fstat_r+0x1c>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	b103      	cbz	r3, 8005964 <_fstat_r+0x1c>
 8005962:	602b      	str	r3, [r5, #0]
 8005964:	bd38      	pop	{r3, r4, r5, pc}
 8005966:	bf00      	nop
 8005968:	200001a4 	.word	0x200001a4

0800596c <_isatty_r>:
 800596c:	b538      	push	{r3, r4, r5, lr}
 800596e:	4c06      	ldr	r4, [pc, #24]	; (8005988 <_isatty_r+0x1c>)
 8005970:	2300      	movs	r3, #0
 8005972:	4605      	mov	r5, r0
 8005974:	4608      	mov	r0, r1
 8005976:	6023      	str	r3, [r4, #0]
 8005978:	f7fb fcaa 	bl	80012d0 <_isatty>
 800597c:	1c43      	adds	r3, r0, #1
 800597e:	d102      	bne.n	8005986 <_isatty_r+0x1a>
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	b103      	cbz	r3, 8005986 <_isatty_r+0x1a>
 8005984:	602b      	str	r3, [r5, #0]
 8005986:	bd38      	pop	{r3, r4, r5, pc}
 8005988:	200001a4 	.word	0x200001a4

0800598c <_init>:
 800598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598e:	bf00      	nop
 8005990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005992:	bc08      	pop	{r3}
 8005994:	469e      	mov	lr, r3
 8005996:	4770      	bx	lr

08005998 <_fini>:
 8005998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599a:	bf00      	nop
 800599c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599e:	bc08      	pop	{r3}
 80059a0:	469e      	mov	lr, r3
 80059a2:	4770      	bx	lr
